// Code generated by "esc -o generator/data/tpl/tpl.go -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/echo_service.gogo": {
		local:   "generator/template/echo_service.gogo",
		size:    1366,
		modtime: 1534832122,
		compressed: `
H4sIAAAAAAAC/5xUXU/bShB9tiX/h7nW1ZWNjM19DcoLKKUfgqAQ9RUWexJvMbvu7hiKrP3v1Y6NE1qi
Ss1TPHvmzNmZM9uK8kFsEfo+vx7+OheFUSgfW20IkigMYoVU1ERt7A+CeCup7u7zUj8Wjbi3JMqHAsta
x1GYekRReLYr8YjOgbRANYJUhGYjSoRSKxJSWRBNw0c+YHTToLFRSC8t7mdPaX0UBn1/DEaoLUJ+iVTr
yoIXCwA+ZS2pQeeSo77PP6m2o/VLi86lwJFlR1Mog6OFMdqkr7nHgKpiLr47i1ihbbWyCJZMVxILGEh8
ziSsd3D3zWo1izUfxndRGDC7JxgLAf9GHPqIh3GtA3eKwk2nSridWnH7UaiqQZNY8wR9/+8YTsF3Ph8P
P/gcL9QgdUaB50jKAXKuFeEPSiFBY4BFpIwNpILZHBQ+J790jscdyI1HwxzK/EyqKpEqPeXIP3NQshk4
AuNvO5vv2jaEd62YwRU+81fy/8nJSeYp0oxBbmRgzWX++WZ5lXi/5TckqLNnolrh9w4tZeDLpB7uBnG6
o2y4zGoUYM1TvucGqRh+QN4w0Bl4Gg7syZ1Ys716B0Uuv+zEDT7atxUvxQq30hKaN8vRWayANNxLVYHR
HfEa8PB/wycIRzzLRVnrDAYnTEbod24+uCTHIDegEPJlS1Kr/KtoOoT4enmzjicY5heLdRLzi0C1c3F2
wIfpOwv0h0oXizeFfOG/rfTu6hbFZDM4NygI7TBIHo6f/NjcyYylrvh5Yhu97sW4tnur9B9H+nNd4Qx8
TgaXaK3YIjslH8hSd8pCfgYAAP//FCfB/FYFAAA=
`,
	},

	"/generator/template/echo_struct.gogo": {
		local:   "generator/template/echo_struct.gogo",
		size:    198,
		modtime: 1534991397,
		compressed: `
H4sIAAAAAAAC/1zNvQ7CMAwE4D1S3uHUnXRnRWJEDDxAo9ZUhTYNSTpEVt4duRn42U6fdWdv+6cdCczm
WmMpWmnVtkKn2cZ4scuOKXv6Q8QUtj6BtQIA5gOCdSPBnCeahwjp1Yu5TWmWisTsJXWPuLpjw2zqWoP7
GpYfeG0U8rd0n0/khn2/aPUOAAD//5Sw0ZbGAAAA
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    841,
		modtime: 1531818489,
		compressed: `
H4sIAAAAAAAC/6ySzWrrMBCF9wa/w+CVs7h6AW9C4BK6SBPa0P3YnjgiyUiVRoQg9O7F+bMXLaUhXhmd
OTPn08his8OOIEa1uvymVOVZnumDNU7AuE556zR3G4cHOhq3U0eqVa25VchsBEUbVnOSBVqruav+7F0Z
/7j5jbw17Glm2tMj7s9AXq7mPLOh3usGsPbisBFo9uh9fzmveKCUZugJYp4BAMT4DxxyR6AWJFvTekhp
kPQGmEAt7XnOB+4DQTH/vy7uVdMRd1mcFyDblIrJVR6TXY6u6WJUyyA2yPpkKaUhXt+wnI6YeumFh0rN
k1v8/nMkwfHgLzVPqos8IiFuz5l/YVst38dww4N4DtucpHw+zX3RP879Zmh163ZvlvLsKwAA///TJIC2
SQMAAA==
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    565,
		modtime: 1531818489,
		compressed: `
H4sIAAAAAAAC/5SPQWrzMBCF9wbfYZb5F9EFwg+FQBehlCxygakySZXIkhiNTYPQ3cvYjXGgEKrVjIb3
3vcS2iueCUox+2msddM2beO6FFnAxs6cMAvxV+fNBe01x2AwhCgoLgazyzFsmVAib/6m2nNMxHJbxl1w
QNOL8+bNZRkvqf/wzoL1mLNibnV4x45qhdI2AAClrIExnAnMqyN/zLVOh8RuQCE4uYBexTsc8HBLo7aA
URsYC99tKBxB1dPPy6Ldj+NE88ix0jUG4d7KHhm7Wv89ZdMnny6bBQj8f4Kl+0xXyoMxrOfaM+Si75lE
vQ9OvJqvZkJ9TNJz+CW83qNmhNo23wEAAP//c5VntTUCAAA=
`,
	},

	"/generator/template/ts/README.md": {
		local:   "generator/template/ts/README.md",
		size:    332,
		modtime: 1534991397,
		compressed: `
H4sIAAAAAAAC/0SQzWrDMBCE7wa/w0DOkftzy630kPZmSI6GWkgbR8XVCu2qxX36YrlNj8sw3zfsDkdS
nNRmJd82bbPb4YW/oIwzieJIkbJV8jif4NgTioQ4oc+sbFNYK3cGVqR8EBYuuNpPwpjW3I0IUdTOM3nY
6JEyJ8rzAiFFSQhxrWT0z21zbzD9yqro8AfBfq/yxkVhYAYl0WELOF4Gm5KYeo5t82AwMUJUhl7phqve
d3KKC8+e8gGj81iYv5m7G6pT6SS7sW0eDRynZVtsRanSnvrX7QGVX2f/YzOK0E8AAAD//+tp1C9MAQAA
`,
	},

	"/generator/template/ts/helper.gots": {
		local:   "generator/template/ts/helper.gots",
		size:    2447,
		modtime: 1531822696,
		compressed: `
H4sIAAAAAAAC/5RWbW/bNhD+bsD/4SZslVS7UrZ1QKFMTV/WbR2GuouTT4Y/MNLJZk2TGkUp0dr894Gk
JEuxhaYBAoh3zz33yqPDp0+nEzD/8ConkuyhIgwIFEpSvrFyiaqUvADCAXkiUkwbNagtUZAQDjcIJM+R
p6AEkJxCKZk2DqcTvMuFVJCVPFFUtBReRVjU0PjtB3yeTgAArMMGeX35/q3Y54IjV9rKDyzIAnNGEvTC
H56fhRs6B/eVe1r/82urj0b0Pz0PN3Nwvx9Tv7Xm8zH9mTGfjah/eWPNV2P636x+7frn08n9dDKdNJ2B
NyVlKRC4vvwbbuqmyrpWpluFrrfaIiBP+00sJYPIKG5IgeaYCWkEBcqKJthHN1TWQOK/JRYKxM0nTFQA
GGwCY/wnMiYuG+2tKFmq265NLBREBqrOcQAcTFAE3ShBVjIG15K1rX9mfPzx7kpnucM6rAgrEXJCZWFJ
8I7sc4aROem0tHUMzlapPApDJhLCtqJQ0YuzF2eOQRG5gRg+c7LHCJxb5JtbpM4cOE12VqAo4c69Abex
xS/hJOWFpok7lieaJO44RqZ9gxwlUfhPibK+luzXq5deKbvRnze1j+Dq6BbQDLzvrNpvZb3bUUp2boVm
XvQHQ6X5VAExrNbnWmwVurSe1u6wBsrhBKvWVqSlbP0v7BDkUiihextsSbG45R+lyFGq2tth7Q9o9J/e
IHHjY7XDet0j7WJtPRhwHAPX8/Dli5kgkUErdkueYkY5pu6RH1uIMXKT7lwTFT1IGGqvtAAiJamPQgmU
WJomeL51v2pm+7WGr49j2EFsijoDd7V2+7EAsgJH4Ef1Mh2rCBstlcYEmZDvSLL1Kj2jD5i7xFKicKgy
uY1m9jtleCIx4xRi0Ibvl4vW9vwY1Xm2hENAUwYdQttZ696Cx/3+tVx8COyFoFntVQ893w+PZuyDvCy2
XvPA7HzdlNiFWffk+H6vuv7h9rTjUqCkhNH/MP1oN2Lc8H4SlHvuE7OdD5fzIXyQi165sxj0ZQ8oT/Fu
kXnuhWuL/+xHuAD3woUINCvMjlwPgztc+eHr8HDlP3bhN6IPZI99COgN18e1a6wDdnvtgGzW8jds5b73
GBzzXCytzAIGbmNwlqQ2IOdRezrsEwat7Vf286nV3IvzIOzH9rUfMGYGwAkd2+Au6Rk4gTMbUNln//8A
AAD//8c9h/ePCQAA
`,
	},

	"/generator/template/ts/interface.gots": {
		local:   "generator/template/ts/interface.gots",
		size:    189,
		modtime: 1534991397,
		compressed: `
H4sIAAAAAAAC/0zMQQrCMBCF4X2hd3j0ADmAu0rjKohIdyIymqkEaqxpFsowd5dapS6Hef8ngkTxyjAN
ZWpfA49QLQt+DveUEWLm1NGFIWK2dGNVSFkAwFJuAvd+zjB/vtPVNMrjpC6+qkjowA8YR2fuUbl6bd1p
b3e2bm1TqR6OIhz9DxQBR//xtSz+rncAAAD//8G8gY69AAAA
`,
	},

	"/generator/template/ts/vue.gots": {
		local:   "generator/template/ts/vue.gots",
		size:    1546,
		modtime: 1534992572,
		compressed: `
H4sIAAAAAAAC/4yUTW/bOBCG7wb8HwZCgMiBI+UYOJvFYrPZtkBb9yPxnZXGslCKZIbDfEDlfy9oSTGt
uGl5soczw+d9h1TdGE0MLVzpxmiFiuewcgge1qQbOL53eGpIGyR+Oi2x0CRY0/HFdNJXrhx+QasdFRiV
UB+KEtvpBACgbUmoCiH736mCa62s98NO9k4ZxzdPBr2HeQgsHUeRIQ9VGYoGxiwvBYv4KKhQIQnGW5Kw
S9ugNEjH08l0snKYOYtphD+7CBv/PBsxneDjtl2Ja+EkQyGFtYHqKvz4KJoAhY+MqrRb03qJeQ6FVpbJ
Faypi0WBdDYkhmWdQUpnXcAHgr7Fv8Ii3JLsAobqe8EI34QNohZgmWpVwSUkG2azyHOpCyE32vLi/Oz8
LBm8OioGWFhcwg4ddra/MpBOZGoEicYuRiOaLeAT6aa2+L7+jn+Nx/UDrok0/R2rDWv/n0QGtycoml3K
m9pmveZ5EqvxPplD8oyYhOnFfds2P6nXkOIdZG+ZzQcuIamQk9l+Xp5DvQZnESpkGO85khHRZ4f0FLAc
yTlsTRkfi6o8yQcDozNulv8tF1AiIzW1wuHA3GjLIIpCUxnUswbCO4eW9zsQsiMFWzuOwsCztj0N4Aoh
W5owtmwlpENI3lzfJOB9aNy2KC16XyH3j6Yjh98Wb+c9lLfdX9/3mGW8QZXuA3aQFi5fjHtY4QVoiZnU
VUpox8YNq16H3Sy86AzD/Zn9ol9ki8KH7q6NSw9X+sPhvtlzC0JrtLIIwo4/RQfY/fxlbAvxh5Z0wBev
ou10Jl91g7wJV+aBtKqSQ5UjnXGKH39Kp5OfAQAA///vr/IBCgYAAA==
`,
	},

	"/generator/template/ts/vue_ts.govue": {
		local:   "generator/template/ts/vue_ts.govue",
		size:    958,
		modtime: 1534991397,
		compressed: `
H4sIAAAAAAAC/4xRTWsUQRC9L+x/KAYhybKZzQqGOCGHICq5aMDovTNbu9M42z1095CEpg+iUQNRAy4B
9aDgJZhAPEjIJkr+zMxObv4F6fnYbEDEOU1XvXr13qtWo1GvNWAtoBK6NESgEnrIUBCFHVjfgqlIcMVJ
RKcKHBYwnzNFKJPQFZwpZB1YXl0Bn3cQVEAUbHDxFDaoCkAFCCFdF0RswRTZpFzmTLZ8tSgfpBI2BFUK
GVAGa1sRPvIFjZSFz/7/Z+GXFx+S02+j/VfJ+Uk2+Dx6vZecva2cWEDRSne3073DdOdNdnh8+f15NjhY
Xl3JPr5Izr9mX579/rmbDk+SXxfZ4CA7OkpOd0b7w/TsfW5iguTldoEvkNd0t+o12o+4UJAPNUHDsv1Z
FbxPJYKx+fWrXBbHaF2vAQBoLQjrIbj3YuYrypk0purMgrvColjZfTBrTLNqIOtYVEXttjpEkUnuce6P
RQhXsADDCIUF1mutxjqReT99dzz69GM0GFovPmdSQdVaAidQKvJarfbtm257fsFtt2+583PewtzCnLNY
r2l9ww+JlA9IH8FbAvfO+GUVWg9/84ebuc5uWQOtXTtjzHREBOlLz1bG3o2Z8a6HWoYXooJYhB5IJSjr
wdKk7+nSRNOZFGmM0wRnvM+ZWSyoBKpYsOKGrpVNu8AQ3IeRFeg+IWGM4Ny/u+aAMRGXSmsMJRrTQ1Ue
ZDoWYRO0/udkbq+a1VC8wZQUVk0eW3nheu1PAAAA//+m0DBgvgMAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},

	"/generator/template/ts": {
		isDir: true,
		local: "generator/template/ts",
	},
}
