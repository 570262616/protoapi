// Code generated by "esc -o generator/data/tpl/tpl.go -modtime 0 -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/echo_enum.gogo": {
		local:   "generator/template/echo_enum.gogo",
		size:    410,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3yQMWvDMBCFZ9+veIQOFjTOnpKpaaFLUmjoEjKo9tWYxmcjy0MQ99+L5MSQod0ep/fp
Pm61wnNXMWoWdtZzha8Letf5zvbNE7Z77PYHvGzfDgVRb8sfWzNCKN6nqErkL30a7WzLqmjEE5WdDB45
AUAISzgrNaN4bfhcDVC9PtyYEB5ucRPHn/Y88txagqVSJUP0PUqJvIzGM23w4V0jdW4wpIBAmdiWB6w3
aG1/nKunqRDSx/+63fmtsZjz4vEOnswyJcoc+9EJ0uZjVDyR/mUcb56beKsoeyXzRrxJVUNKvwEAAP//
zr/nV5oBAAA=
`,
	},

	"/generator/template/echo_service.gogo": {
		local:   "generator/template/echo_service.gogo",
		size:    2836,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xWUVPbRhB+tn7FRk3TO4Nl4TZDgfHQFOyUzgCZ4OlDOQKytLavke88pxM1lS+/vbOS
7JoAnSZ4+nJz2t37vm/XuwvtNhzpBGGMCk1kMYHhHcyMtjqayQM4Poez8wH0jk8GgefNovhjNEYoiuBd
dXXO8+R0po0F5jV8g2Ocz3zPa/hjaSf5MIj1tJ1Gw8xG8cc2xhPte9zzYq2y8kVvGskUMmukGkMX/A+M
MXYZtf560/r9aiFEsrh88Y0QL7999Z0QTSG2hGgJ0e4KcSjEh+ubQoiF+3S1uBRiXoThm9C16Ha82+87
uvT3wtrUPz6qTcf9panf67srvsWECP53Ut7kC8aEmHc6nJKmW7gQYh7u8SZ9hQkdEeeH93xb/JAxYg53
CC/8kY4hHTEdSMadkRDz3RHlMu/slDo735Pj9bBS/Tqhr118Xg4LJsS6lL37UiqO0fM4OOfNL6xOVVPO
f3rQSs/KdXNY95FaCyGCxfXi07Mwm5uTx7kQAd9aS3hThdtk0TZYsGcX6/BludVuI0M7zcyrrdaFah0G
p3lmj/R0JlNkpYtTdLtNe/QsmqJzIDOwEwSpLJpRFCPEWtlIqgyiNC1dZDA6TdFknr2b4frj1avCaxRF
C0ykxgjBKdqJTjJwzgMAejCQNkXnWLMoghM1y+3gbobOcSgt57ldmYpCjkAhBD1jtCEb+L5z20CBKxvF
oUqc4zVDC1AlROi8SuV7zGZaZXhCGlVU7vo8tqR06fpHf+Hg5o9Mq33f1D7/xmuUbAT/SBySz78huscT
H+UqhutVra5/iVSSomGZuYWieFmbOdCfpqB29ulN4TUM2twoIAgWVxFHWlmcWw4MjYGSnVNoQyrY74LC
P9lnpfXIOaJQ6EIc/CxVwqTiB6XlRReUTEuABqVMGJ9XrCjz34cjPZ1qVX4UhFKbX63uxSlmWTTGfYKu
fiPGnXMVeJlKHPx6cX7GfuiE20B83Gs0XK3wNkp7xpACqYLfolQmkUXGD5aOr9W6hKpdFdp/U6Vz+2gf
AjViWfy6/UhLZm6DtRaXimCoKR4HWP0s+stSK188pj68p76iLsVRJk+iLg37oHNbh67DdtZgaarWRow2
yHscy8yiubdJ8gwTsBqGUiVgdG5pZ5SD8CCcITTLxu7FE70N1VSshqJYTfVTG2VV3Qs0tzLGqr7vzi8G
/jIIg7e9AfPL/xntxDl/+4l55A+WyL+SvO2tcxDl15E8XFx/BwAA//9aHSIDFAsAAA==
`,
	},

	"/generator/template/echo_struct.gogo": {
		local:   "generator/template/echo_struct.gogo",
		size:    797,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xSz2vbMBg9W3/Fmw8hLq2ys0cGpXbAkKZblvUyRqrFXzJtjux+VmBB6H8fUpOSBMZu
vZin90nvh6XRCHdtTdiQIVaWavzYo+PWtqrTH1A8YPawQFlUCylEp1a/1YbgnPz0Ar0XYjQKxF2j+n6m
toGy+44uOPSWdysLJwDAuRuwMhuCnGhq6h7eHwZyoW0TDgS47wJ6+tW3Jk+dky9a6dOrCJk6HPVCrHdm
hSFf2GZ4VI2ulaVhhqsjLplbPkQh5h75GN++X8Uoceb8/2LeQK9Bz5BHzTk97zRTjZQPKA27E70Gy5Na
4zHS9OAd/YP5pCqnxXJefv5azctCJElMNYbqOjL1MKyuMTjJF+HSqC3lZ/LXiPNluIEcA/KZSPzl3/pH
g0nLW2WR0lbp5jX8O/5TBkLeK7v6+cWyNpvhqWV2WaaaPd5Oq2JZ3t9W07fqcrLUazRkolGGj3gPJ5KE
ye7YYHD2BFz89nl8BD6oH/cZ3Qgv/gYAAP//EHwqaB0DAAA=
`,
	},

	"/generator/template/php.gophp": {
		local:   "generator/template/php.gophp",
		size:    2425,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xVTW/jNhC961cMBAOWAlvrbQ9dxI2LNEm3OSQput6TEwi0NLG5kEmFHCbrCPrvBfVl
SZa3RXkwTHjmzeObmedff0u3qfPh7MyBM1huuQaugcEzTxA2KFAxwhjWe0iVJMlSDt4rKs2lCIx5N0Ek
dx/qn3yL8blJYnQOWQbBku8Q8tz+eP0A9w9LuLm+XQYOnH1wHMF2qFMWIWRZcM92+MVe8nzuOEYj3HyP
MCUuxby4fjbv7wn+SZQ+XiUcBQHTYK/lbe5kmWJigxDcodZsgzrPnShhWkOWEacEoSiS507mAABk2RSq
jD84JrEuiAJAqvgrI4RRRcsyKhNQxHWMWSc8gmcjIksRXlnCY0boMaXYHkYKdSqFRr/MLD5/WNQe/gwe
1xrJa/JXbkPCffL9FlKJZnO4flh/w4gguGbElvvUSj6iLdfTRZMNFyDwrS/FqULzLANMNA7iDOcUKY0+
9uQFRI8ybZV8K6g0/fXccYMztjMoJAF+55pcf35A62h4qJRXvRluZa9NGilsanlZNqhenvdUqjt/GIh+
W4dU6k1P7gwy2nQY9XEVklHiCH7eefnpqSQZFvN4Cnf13+ayDDihVWsG4GJxRHW6OJCY9BDLCfsXgEn7
gcftt+ep1iN36uB68bsrb90KI2tQo23LOQa1C8NICk3KROSN1kzjV8XhAsYff/olmAWz4OP5p9mn2fjE
JBzgq8U7OJXXUWHVudkztsVCo/i4kKMqPTmOI75DaagI+3nWDXhqbn53/Cpva54ZsSS5TLk1gpcJjHZI
WxlPYGQUn8BIGkoNWQ2P3hkzYnDR4z/+pqUoeSt8Ge7902GnGyex+9IXbrpQ+GJQk9dnZUv7bRT2diUF
lWI3mNPFBul3Ge89v/hahWjPrzpe5EZNoqUexhjJGL0W5ARIGWyVa7l0lbxyUSmpBgx6yO2OslburvzH
ssY74HdDBetHDtS0ApiknrtWC70Weitwumj+vAbxu0m1I5W58/9h9ldMWIN/5iKGpv9rGe/PwYWg3c0j
NXpef1eMhT5hfm2fD25Faqg0rGI0f2y03aWwBmXX947iPHfL+9e/b4vvYXh/eXfz5a/Lq5swhADcx8cs
Cx4KzSt/bBaw8qbc+ScAAP//SLLRKXkJAAA=
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    856,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6yRTY7iMBCF9zlFKauwGHOAbBADQiwgaMgFKkkRLKDssSuNUOS7t8JfsuhuqRFZRX5+
z++rGo/hr6kIamJyKFRBcQHrjBi0OoVZBussh/lsmasoslgesCZoW7W5/YaQRpE+WeMEjKuVt05zvXN4
orNxB3WmQhWaK4XMRlC0YbUgWaG1muv0t9aN8S97/5G3hj1NTXV5wfy/IS83b2Sb4qhLwMKLw1KgPKL3
3VTWeKIQpugJ2ggAoG3/gEOuCdSKZG8qDyE8Fb0DJlBbch+6pPxiCeLFPI8fdyYD3iS+Tl32IcSjmzok
up7ce7WtyhqxjXSJIfTFurhkMmDppCX3NzWP7sW7z5E0jnt7onmUXtUegbjq2v6ItMm2A6Z+/e9AWpAk
b4V4LvXbJ794L71HPZJC9BkAAP//3o5aN1gDAAA=
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    585,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SPwWoCMRCG73mKOdqD8QGWQkFbqBT1sC8w7o7baDYJk1mphLx7ibqtUmhpTjOB+f7v
n81g7luCjhwxCrWwPUFgLx6DqWCxhtW6hufFa62VCtgcsCNISW8uY86VUqYPngUa3+sdRiH+6K3eY3OI
3ml0zguK8U4vo3dzJhTP1b+ONuwDsZy+s/Z4RD2IsfrNRKmUCsPWmgYaizEWv3kZVthTzpAUAEBKU2B0
HYF+MWTbmPP5P7A5ohDsjENbTpd4xPoUzpcJdIFA6TlCyLWQszrvTzedLrSLx73BpKzeCQ+NbJCxz/nh
D6vy5N1EfaMAj78KlfWqldIdE6Zj1y+7m5IdScHWRmzhTka18phkYPczNl9jxuysPgMAAP//ioLHmkkC
AAA=
`,
	},

	"/generator/template/ts/data.gots": {
		local:   "generator/template/ts/data.gots",
		size:    584,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5yOQWsaQRSA7/MrHl6Epeq90IPFLRSkSJFeSinj7lMH1tntzGypDAOFGBIhBiGag4fk
FBAE9RRIzM9xd/0ZYdVFc8jFOc3wvvneV7IsYkG9zSQ0mYfAJLSQo6AKXWh0IR8IX/k0YPk3mONzRRmX
QD0PVBvBpYqCVCJ0VCgQGsh4C0KJLjC+BQ5WJUGi+MsclMSCwimHWLBZPMS3F+vVYzK6jy+H6+frrJRY
sJtEV+fRcFaufY36g2S22CzPktE07v+PXsbJaJpMevF4GQ/myeomvutF88n6qU+sEtG6AILyFkLR5mFH
gjEE/wW+UIA87IDWxW+0g8aAJgAAWmf4F4aeu+VhN8jAT+n9B/VCNOZD9gm5m6Jmu3D/OF5eoYrWuwEe
BzCuUDSpgydUfEwZJVPlQW6M1qwJ+AeKVdpAD3LV8me7+vu7XbPLdbuSM+bnL62Ru3vfO+GvAQAA//9s
n4weSAIAAA==
`,
	},

	"/generator/template/ts/helper.gots": {
		local:   "generator/template/ts/helper.gots",
		size:    3442,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xWbW/bNhD+rl9xE7ZITlwp61qgkKemSequGVK7s+N9CYKCkc42a5rUKMqpl/i/D6Re
bctdEQMJpLvnnuO98E50mQip4BEuxXIpeF9KIbtwnql58fg3YTQmCovXC8pj8wgbmEqxBMfzY6KIY/nH
xxYcw3ucUo4xfFQqgUsRI0yFBIlpIniKMCc8ZpTPLDj2LfxmnCPPljBXKjHwRwsA4H3/w/nk+gZCOO0a
wWA4+nR+DSG8PC0kF5Px1aA/Hn/pj0bDEYTwqtRcDj99Gg5q+ctCfjW46Y8G59eV5rW22JRH13/vEiLJ
Eh4b6dhAVL6AmiOgCV/cf8VINcOYZjxSVHBYkqRhfrNO0K0YgmaiOwG4qZKUz+Cpzjk8bScdnuqsd4r0
6Jy6DBUscA2U1ycsAfoXCZ4Khh4TM3eB606loFOoT+TNSTp84J+lSFCqtUHC0VFNebvA9V2TV//SB6qi
OeTobZVxTVIEZ4YcJY2+mIw5wR5K/ySqTPIdb0BSyBNzgJlkav482irN1gHqVZH759FvVe6Qi3vK4+fR
V42wZxbjlGRMfZfPnvAFFw9gGOwt5KY+68aq/7cbbqziyjRuzIowIFXRjuFdbpoC4YA8EjHGhRbUnCiI
CId7BJIkyGNQAkhCIZOs9UblBO6KsKAg6ZQPRfMVB82Bk9HVpVgmgiNX2qjjWXUmEkYidP1fXp36M9oF
553Tqv7tPFcH7eqXr/xZF5yfD2gvc+PuAfWpMT5p176+yI1vD6jf5+o7p9OrKwEXGWUxEJiMruF+XeRV
58eUJ9UZNsOLx42iZZJBYOT3ujH1q54sWpCiXNEIG+CCKMdL/CfDVBVj0AP0Zp6x/YiMiVGhfRAZi3WZ
tUkOBTEFtU5wC9hsmACqzoFpxhhMJCtr/cK4+KN/o0Nc4NpfEZYhJITK1HDgN7JMGAb6RYekbUOw9XIJ
fJ+JiLC5SFXw5vTNqa1BRM4ghEdOlhiA/YB89oDU7gKn0SIXKEq4vdHY8lzhW2glPNMsYUVypDnCiqK1
sc2EJAr/ylCuJ5L9fvPWzWTV5d0i6QHc7Da8nuE/5drmAC7uQSZZz2rca70qEiJVCiHc3vUsq3WL7NNp
5YoUXKXbYV7zRAoldCnbNsjuUtDjISwcmGnWs1pGj2Y3yDAErmv/9GSaRUyhFDsZj/NPDGfXRx57K7EJ
sqtJ0lrv+9ohTYFISda7h/CUGJuEu53c8W3RwOcafbfnfQGhyeMJOLd3TuMUgCzFdvBuikx5VoS1Z0cD
vKmQfRLN3ZVuw23SKh69gLY0JqSDAX2gDPfjMR4hBG13NR6Wpr09UOW2/CRqrpU8eO2/rGPuO8cedPrn
eDjw8n6n07W72nG72Xozje0lWTp3i0Wx6OgyhA6cVKujU3/+bDq9xorTrZGipITRfzH+nA+5sCD9Kih3
nSM9aqtbtwtuxqAn6EkI+g57lMf4bTh1nTMnT/iLX+EMnDMHAtCUcLLnt7e/evVKbNu32tMPDu5CMiBL
bCJAj6sGrBxKFa6aUhWwGK8/PF2bnkOwzcgf5zKj33IZgj0ma4Oxf2Tc+k06rzT97phtm7CNM9bC5sH+
55PDlBxs387rWcV7AranZU0qvbD/CwAA//+Wh6pWcg0AAA==
`,
	},

	"/generator/template/ts/ts_service.gots": {
		local:   "generator/template/ts/ts_service.gots",
		size:    3432,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/9xVXW8TRxe+319xXgvJHzK75JVexOs0ldI0rSKRDyXhuprsHscD65llZpwQbUeC0kCR
AolEhNomLVQtFSofaaWWkkDKn/Ha4Yq/UM3O2k4UEkjDVfdqd+ac5zznOcePvVLJKcF0jUqo0hCBSphF
hoIoDGBmAfKR4IqTiObTMLRRPmeKUCahKjhTyAIYnBgBnwcIqkYUzHNxAeapqoGqIYR0RhCxAHlyiXKZ
L5tDgVUusAxU5SUIvNigAgObnIUZKpRJRcIQA6AshYoEP4++yrj0mKalqYR5QZVCZsKnFyKc8gWNOtFp
TCT4HA1QAoEZIqkPDUlmEapc2BZIGAJhAdTJAjDEAEhwviFVHZkC4vtcBJTNguIgI/RplfodSp0mbCQL
QFLVIIpy5pTg5Ls/Tgl2Nu637lxvPn/aXr3b+mqluXWrMwSnBPYmWVpMVh4mN262H27s/Hq1vfpgcGKk
/e2Xzec/tu9def1iKdl82tx+2V590H70qPnsRuvOZrJ1OxX29YslSNbutR7/9Gr98s7PV5ovv9vZuJJe
JY+/TtYfNLduvfphs732pPnsca/gtUWLbVH3iLuzcd8yzUKXf2ktrzT/WrP0BidGLMPk7lZr/VGP4ZPv
X32z2Lq6mFz7I1ne2Lm6bfm07m22bj5JFv9sbt+2POy7ufrti+azm8nK0s7lpeb2enJ9q7X2e2t10yl5
Dq1HXChI+yhDDIPmZULwOpUI2ixqvbNZ/Z3g2AEAiGNB2CzCCbUQYRlOzHAeQmUACrOoRtLAj4kipmMJ
7icN5puhyqLWWfZJmwlalyE7QhZo7XSqul5AFNlVtru450RYhppS0RAPsAx1Eg3xep2zYSG4mE5Buxg1
DCMU+X7H8UozRJpcSJY3rAIlz/E5kwo6NwOQM7gVz+v7/3/dvtNn3L6+/7mnT1XOnDpzKtfveB40JFq5
HCdtwg+JlGOkjqZ5d6j7dVJrG2Fl6kmgtU2so6rxwGTlIi5VLs0wN7QKeDHVcQrFHPVxVAXgjkdWQMh9
OjzdC94NM4tdFCtlGoBGFXOfQvY06iFq7eClVONqRhLi2DVdaF2IiCB1WTEnIyxqKJOrdbEC2ZZ8EMfu
eEN1b+BzYDiH4sNsT0JU0BBhBaQSxgQGdo+xkAlfhlwc96TUOpeeZBxyxf4UyvNAoVTpu0DVEMxOwo3j
TAatCw2DFse0Cgy76lhptLbNxDGGErWOwX6DzgQrptDmcVUNWUGghIFOI53H86BGWBAiyIbvo5Rg9nRP
CK2aVFcqohoS/jPQXVZ3bHxydPBscS/irn4yUV2Bxh1TFIPu2iESCXFsB7qbrHm0cyia5OEc9uAEyogz
s8kGcc/8erC66PpE+bUCCrFfBjlPs7suWtbwG7rzicSeCB+dmxoZG56a+mx4cnJ8srIv+mA99lTbJcxh
yuyvPzQ+Ojo+dlh1s7SWwbDp/Q0WcxCVbFXfdbxZibcxHhmbHp4cGzz73hTbXzDAKmmE6ijYDOchFaSQ
O8cuMD7P7GeueNBu6mK/07MnJ469UsdTq6j82qGG+a8yskxumBifmt5taKkMhRhSG7PuVYG8+YPIl1Oj
qXRNq3iASb3FoI5oTscxpt7gj21IB5vROxvR0Uzo/RnQUcznGD/ioznGMQod6BT/3CW0s98dSp7WfwcA
AP//O3kAlWgNAAA=
`,
	},

	"/generator/template/ts/ts_service.govue": {
		local:   "generator/template/ts/ts_service.govue",
		size:    2482,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6RWXW8UNxR9n19xtULaD21m81IJbQoqBVpFapuoBN6dmbu7hll7sD0J0dQSlAaKFCAS
EWqbtFC1VKh8pJVaSgIpf2Zmd3niL1Qe78eM2NBK9dPaPvfc43OvvdOo1ZwaLHWohBYNEKiENjIURKEP
y2tQDgVXnIS0nMHQojzOFKFMQktwppD5cGJxHjzuI6gOUbDKxQVYpaoDqoMQ0GVBxBqUz0X4OUoeCQ/L
dbMlsMUF1oGqsgSBFyMq0LcUBbCRRZlUJAjQB8oy2lDw8+ipoa6J6kwGlbAqqFLIDHxpLcQznqDhCJ1h
QsFXqI8SCCwTST2IJGkjtLiwxyFBAIT50CVrwBB9IP75SKouMgXE87jwKWuD4iBD9GiLeiNJo6NYJPNB
UhURRTlzajDz34dTg8Hug97d68mLZ/2te72vN5P9W6OCODWwO+nGerr5KL1xs/9od/Db1f7WwxOL8/3v
vkpe/NS/f+XNy41071ly8Kq/9bD/+HHy/Ebv7l66fydn75uXG5Bu3+89+fn1zuXBL1eSV98Pdq/kAOmT
b9Kdh8n+rdc/7vW3nybPn0ySX1u3eWyGgtGD3QdW9RB6+9fe7c3k720r9cTivFWb3tvv7TyeqH36w+tv
13tX19Nrf6a3dwdXD6yq3v293s2n6fpfycEdq8P+Nlu/f5k8v5lubgwubyQHO+n1/d72H72tPafWcGg3
5EJBDCd5N+QMmarDuQhBm97tQnklwplQ8BCFWpvx0eOCKC7Kc6PAnA25CDHqzDEudgAA4lgQ1kY4otZC
rMORZc4DaB6DShvVfAY8RRQxLklwP4qYZ5pCVrUeRs/YSNC6DsMlZL7Wzkiu2/CJIrm048Y/KwKYoDoY
hCjKjnMuQjeSWMmdozrnOB+M7XDwUsbkY4tEgQIvIFJCHLsnzY/PSBe1BrxkbrnMnLMnbTTMKyCViDzF
RbaUm1eqQ5gZMgpRVKrZXDuj6A+JRDgrgmweCrpCFJp7aA7SBKmEuVzHoNRRKmw2GgH3SNDhUjWPzh6d
LU388kYyjc8T0TCTM9UWZWJ43u8uqg73TXAp5FKVCoG0BXgxq94ZFCvUw0+VD+5CaMsGpY9PLxUD8nRt
LLDZQo6BKAQXBpfRnzYz0xc59jHatVWohESQrmyalXkWRsrgta42YVHwLpX4Cb2A78exuxCp8S58ARn3
cYidcUXMCFBBVLA610kV1aHSHVajXorjic1al+pQGosqmW7K8zYasLRwaqEJPioUXcoQImneZ9Uw/hZf
TvNQolQFAoEqEuaJp9I9YqrvxvHQVq0rkQjq49owHBtu3dbaehTHGEjUOrZTPXS/6qoOskohnU0p4djx
XMvmh2lrHqAb8HZFoKzOTUU1GmAr2iHMDyhrT0XRFhgO11xiN8NXD8k6He36qAgN5Luich4O+8IVaP6W
DuM6lEk7/4cfiHlGbJ9rPT3L9AxD9jGdQBlyJtEyFtr77WLo+ltLVo4psCkTNx8edk2CjLyOoX1vdrYO
jANDZT5e/rURbO3m3iWf4aq9epXSGW661PT8quCsXZoSWHQiByg+H9r5JwAA///AQsj+sgkAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},

	"/generator/template/ts": {
		isDir: true,
		local: "generator/template/ts",
	},
}
