// Code generated by "esc -o generator/data/tpl/tpl.go -modtime 0 -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/echo_enum.gogo": {
		local:   "generator/template/echo_enum.gogo",
		size:    410,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3yQMWvDMBCFZ9+veIQOFjTOnpKpaaFLUmjoEjKo9tWYxmcjy0MQ99+L5MSQod0ep/fp
Pm61wnNXMWoWdtZzha8Letf5zvbNE7Z77PYHvGzfDgVRb8sfWzNCKN6nqErkL30a7WzLqmjEE5WdDB45
AUAISzgrNaN4bfhcDVC9PtyYEB5ucRPHn/Y88txagqVSJUP0PUqJvIzGM23w4V0jdW4wpIBAmdiWB6w3
aG1/nKunqRDSx/+63fmtsZjz4vEOnswyJcoc+9EJ0uZjVDyR/mUcb56beKsoeyXzRrxJVUNKvwEAAP//
zr/nV5oBAAA=
`,
	},

	"/generator/template/echo_service.gogo": {
		local:   "generator/template/echo_service.gogo",
		size:    2836,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xWUVPbRhB+tn7FRk3TO4Nl4TZDgfHQFOyUzgCZ4OlDOQKytLavke88pxM1lS+/vbOS
7JoAnSZ4+nJz2t37vm/XuwvtNhzpBGGMCk1kMYHhHcyMtjqayQM4Poez8wH0jk8GgefNovhjNEYoiuBd
dXXO8+R0po0F5jV8g2Ocz3zPa/hjaSf5MIj1tJ1Gw8xG8cc2xhPte9zzYq2y8kVvGskUMmukGkMX/A+M
MXYZtf560/r9aiFEsrh88Y0QL7999Z0QTSG2hGgJ0e4KcSjEh+ubQoiF+3S1uBRiXoThm9C16Ha82+87
uvT3wtrUPz6qTcf9panf67srvsWECP53Ut7kC8aEmHc6nJKmW7gQYh7u8SZ9hQkdEeeH93xb/JAxYg53
CC/8kY4hHTEdSMadkRDz3RHlMu/slDo735Pj9bBS/Tqhr118Xg4LJsS6lL37UiqO0fM4OOfNL6xOVVPO
f3rQSs/KdXNY95FaCyGCxfXi07Mwm5uTx7kQAd9aS3hThdtk0TZYsGcX6/BludVuI0M7zcyrrdaFah0G
p3lmj/R0JlNkpYtTdLtNe/QsmqJzIDOwEwSpLJpRFCPEWtlIqgyiNC1dZDA6TdFknr2b4frj1avCaxRF
C0ykxgjBKdqJTjJwzgMAejCQNkXnWLMoghM1y+3gbobOcSgt57ldmYpCjkAhBD1jtCEb+L5z20CBKxvF
oUqc4zVDC1AlROi8SuV7zGZaZXhCGlVU7vo8tqR06fpHf+Hg5o9Mq33f1D7/xmuUbAT/SBySz78huscT
H+UqhutVra5/iVSSomGZuYWieFmbOdCfpqB29ulN4TUM2twoIAgWVxFHWlmcWw4MjYGSnVNoQyrY74LC
P9lnpfXIOaJQ6EIc/CxVwqTiB6XlRReUTEuABqVMGJ9XrCjz34cjPZ1qVX4UhFKbX63uxSlmWTTGfYKu
fiPGnXMVeJlKHPx6cX7GfuiE20B83Gs0XK3wNkp7xpACqYLfolQmkUXGD5aOr9W6hKpdFdp/U6Vz+2gf
AjViWfy6/UhLZm6DtRaXimCoKR4HWP0s+stSK188pj68p76iLsVRJk+iLg37oHNbh67DdtZgaarWRow2
yHscy8yiubdJ8gwTsBqGUiVgdG5pZ5SD8CCcITTLxu7FE70N1VSshqJYTfVTG2VV3Qs0tzLGqr7vzi8G
/jIIg7e9AfPL/xntxDl/+4l55A+WyL+SvO2tcxDl15E8XFx/BwAA//9aHSIDFAsAAA==
`,
	},

	"/generator/template/echo_struct.gogo": {
		local:   "generator/template/echo_struct.gogo",
		size:    797,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xSz2vbMBg9W3/Fmw8hLq2ys0cGpXbAkKZblvUyRqrFXzJtjux+VmBB6H8fUpOSBMZu
vZin90nvh6XRCHdtTdiQIVaWavzYo+PWtqrTH1A8YPawQFlUCylEp1a/1YbgnPz0Ar0XYjQKxF2j+n6m
toGy+44uOPSWdysLJwDAuRuwMhuCnGhq6h7eHwZyoW0TDgS47wJ6+tW3Jk+dky9a6dOrCJk6HPVCrHdm
hSFf2GZ4VI2ulaVhhqsjLplbPkQh5h75GN++X8Uoceb8/2LeQK9Bz5BHzTk97zRTjZQPKA27E70Gy5Na
4zHS9OAd/YP5pCqnxXJefv5azctCJElMNYbqOjL1MKyuMTjJF+HSqC3lZ/LXiPNluIEcA/KZSPzl3/pH
g0nLW2WR0lbp5jX8O/5TBkLeK7v6+cWyNpvhqWV2WaaaPd5Oq2JZ3t9W07fqcrLUazRkolGGj3gPJ5KE
ye7YYHD2BFz89nl8BD6oH/cZ3Qgv/gYAAP//EHwqaB0DAAA=
`,
	},

	"/generator/template/php.gophp": {
		local:   "generator/template/php.gophp",
		size:    2425,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xVTW/jNhC961cMBAOWAlvrbQ9dxI2LNEm3OSQput6TEwi0NLG5kEmFHCbrCPrvBfVl
SZa3RXkwTHjmzeObmedff0u3qfPh7MyBM1huuQaugcEzTxA2KFAxwhjWe0iVJMlSDt4rKs2lCIx5N0Ek
dx/qn3yL8blJYnQOWQbBku8Q8tz+eP0A9w9LuLm+XQYOnH1wHMF2qFMWIWRZcM92+MVe8nzuOEYj3HyP
MCUuxby4fjbv7wn+SZQ+XiUcBQHTYK/lbe5kmWJigxDcodZsgzrPnShhWkOWEacEoSiS507mAABk2RSq
jD84JrEuiAJAqvgrI4RRRcsyKhNQxHWMWSc8gmcjIksRXlnCY0boMaXYHkYKdSqFRr/MLD5/WNQe/gwe
1xrJa/JXbkPCffL9FlKJZnO4flh/w4gguGbElvvUSj6iLdfTRZMNFyDwrS/FqULzLANMNA7iDOcUKY0+
9uQFRI8ybZV8K6g0/fXccYMztjMoJAF+55pcf35A62h4qJRXvRluZa9NGilsanlZNqhenvdUqjt/GIh+
W4dU6k1P7gwy2nQY9XEVklHiCH7eefnpqSQZFvN4Cnf13+ayDDihVWsG4GJxRHW6OJCY9BDLCfsXgEn7
gcftt+ep1iN36uB68bsrb90KI2tQo23LOQa1C8NICk3KROSN1kzjV8XhAsYff/olmAWz4OP5p9mn2fjE
JBzgq8U7OJXXUWHVudkztsVCo/i4kKMqPTmOI75DaagI+3nWDXhqbn53/Cpva54ZsSS5TLk1gpcJjHZI
WxlPYGQUn8BIGkoNWQ2P3hkzYnDR4z/+pqUoeSt8Ge7902GnGyex+9IXbrpQ+GJQk9dnZUv7bRT2diUF
lWI3mNPFBul3Ge89v/hahWjPrzpe5EZNoqUexhjJGL0W5ARIGWyVa7l0lbxyUSmpBgx6yO2OslburvzH
ssY74HdDBetHDtS0ApiknrtWC70Weitwumj+vAbxu0m1I5W58/9h9ldMWIN/5iKGpv9rGe/PwYWg3c0j
NXpef1eMhT5hfm2fD25Faqg0rGI0f2y03aWwBmXX947iPHfL+9e/b4vvYXh/eXfz5a/Lq5swhADcx8cs
Cx4KzSt/bBaw8qbc+ScAAP//SLLRKXkJAAA=
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    856,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6yRTY7iMBCF9zlFKauwGHOAbBADQiwgaMgFKkkRLKDssSuNUOS7t8JfsuhuqRFZRX5+
z++rGo/hr6kIamJyKFRBcQHrjBi0OoVZBussh/lsmasoslgesCZoW7W5/YaQRpE+WeMEjKuVt05zvXN4
orNxB3WmQhWaK4XMRlC0YbUgWaG1muv0t9aN8S97/5G3hj1NTXV5wfy/IS83b2Sb4qhLwMKLw1KgPKL3
3VTWeKIQpugJ2ggAoG3/gEOuCdSKZG8qDyE8Fb0DJlBbch+6pPxiCeLFPI8fdyYD3iS+Tl32IcSjmzok
up7ce7WtyhqxjXSJIfTFurhkMmDppCX3NzWP7sW7z5E0jnt7onmUXtUegbjq2v6ItMm2A6Z+/e9AWpAk
b4V4LvXbJ794L71HPZJC9BkAAP//3o5aN1gDAAA=
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    585,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SPwWoCMRCG73mKOdqD8QGWQkFbqBT1sC8w7o7baDYJk1mphLx7ibqtUmhpTjOB+f7v
n81g7luCjhwxCrWwPUFgLx6DqWCxhtW6hufFa62VCtgcsCNISW8uY86VUqYPngUa3+sdRiH+6K3eY3OI
3ml0zguK8U4vo3dzJhTP1b+ONuwDsZy+s/Z4RD2IsfrNRKmUCsPWmgYaizEWv3kZVthTzpAUAEBKU2B0
HYF+MWTbmPP5P7A5ohDsjENbTpd4xPoUzpcJdIFA6TlCyLWQszrvTzedLrSLx73BpKzeCQ+NbJCxz/nh
D6vy5N1EfaMAj78KlfWqldIdE6Zj1y+7m5IdScHWRmzhTka18phkYPczNl9jxuysPgMAAP//ioLHmkkC
AAA=
`,
	},

	"/generator/template/ts/data.gots": {
		local:   "generator/template/ts/data.gots",
		size:    584,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5yOQWsaQRSA7/MrHl6Epeq90IPFLRSkSJFeSinj7lMH1tntzGypDAOFGBIhBiGag4fk
FBAE9RRIzM9xd/0ZYdVFc8jFOc3wvvneV7IsYkG9zSQ0mYfAJLSQo6AKXWh0IR8IX/k0YPk3mONzRRmX
QD0PVBvBpYqCVCJ0VCgQGsh4C0KJLjC+BQ5WJUGi+MsclMSCwimHWLBZPMS3F+vVYzK6jy+H6+frrJRY
sJtEV+fRcFaufY36g2S22CzPktE07v+PXsbJaJpMevF4GQ/myeomvutF88n6qU+sEtG6AILyFkLR5mFH
gjEE/wW+UIA87IDWxW+0g8aAJgAAWmf4F4aeu+VhN8jAT+n9B/VCNOZD9gm5m6Jmu3D/OF5eoYrWuwEe
BzCuUDSpgydUfEwZJVPlQW6M1qwJ+AeKVdpAD3LV8me7+vu7XbPLdbuSM+bnL62Ru3vfO+GvAQAA//9s
n4weSAIAAA==
`,
	},

	"/generator/template/ts/helper.gots": {
		local:   "generator/template/ts/helper.gots",
		size:    3468,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5RWbVPbxhN/r0+xf82/SAZHomkyk5GrECAkoUNwaqAvyjCdQ1rbF5/v1NPJxAV/987d
6cm2nAbPwEi7v/3t7cPtis4zIRU8wqmYzwU/k1LIPnxEjpIm5dtxoabl4x+E0ZQoLF9PKE/NI6xgLMUc
vCBMiSKeE+7vO7AP73FMOabwSakMTkWKMBYSJOaZ4DnClPCUUT5xYD908Js5CvJiDlOlMgN/dAAA3p99
OL65uIYYDvtGcDkcfT6+gBheHpaSk/M//zobjYYjiOFVJTwdfv48vGzkL0v5+eX12ejy+KLWvNYWq+rU
+u9dRiSZw2MrLytIqhdQUwQ0kYv7r5iodgTjgieKCg5zkrXMr5cZ+jVD1M54LwI/V5LyCTytJR+emuzD
03r64anJf69MlM6uz1DBDJdAeXPgCqB/ieC5YBgwMfFnuOzVCjqG5oDBlOTDB/5FigylWhok7O01lLcz
XN61efUvf6AqmYJFr6uMa5IjeJNWhF60BdI/iaqQfMMZkHwtOzvoSZWx53LXqXZ2MC/a+X8u+1rxdnm4
ryr6XPa6FbbMUhyTgqnv8rk3fMbFAxgGdw25ao66cpr/3YYrp7xDrSu0IAwI2PY2YmuaA+GAPBEppqUW
1JQoSAiHewSSZchTUAJIRqGQrPOKWQJ/QVhUkvSqh7L9yoNa4M3o/FTMM8GRK23UC5wmExkjCfrhT68O
wwntg/fO61T/cmzVUbf65atw0gfv/zu0p9a4v0N9aIwPurWvT6zx7Q71e6u+83qDphJwUlCWAoGb0QXc
L8u86vyY8uQ6w2aa8bRVtEIyiIz8XvelftWzRQtylAuaYAtcElm8xL8LzFU5FwPAYBIY20/ImBiV2gdR
sFSXWZtYKIgxqGWGa8B2w0RQdw6MC8bgRrKq1i+Mi49n1zrEGS7DBWEFQkaozA0HfiPzjGGkX3RI2jYG
Vy+aKAyZSAibilxFbw7fHLoaROQEYnjkZI4RuA/IJw9I3T5wmsysQFHC3ZXGVueK30In4ZFmiWuSPc0R
1xSdjW1mJFH4e4FyeSPZr9dv/ULWXd4vkx7B9WbD6yn+P6ttj+DyHhSSDZzWvdbLIiNS5RDD7d3AcTr3
yDadVi5IyVW5HdqaZ1IooUvZtUM214IeD3HpwEyzgdMxejS7QcYxcF37pyfTLGIMldgreGo/N7xNHzb2
TmITZF+T5I0+DLVDmgORkiw3DxEocWUS7ves49uygY81+m7L+wxik8cD8G7vvNYpAFmO3eDNFJnyLAjr
zo4GBGMhz0gy9Re6DddJ63j0/lnTmJB2BvSBMtyOx3iEGLTd+dWwMh1sgWq31TdSe63Y4LX/qo7Wt8Xu
dPrb1fAysP1Ox0t/seF2tfZmGjvIinzql4ti1tNliD04qFdHr/kAWvUGrRWnWyNHSQmj/2D6xQ65uCT9
Kij3vT09autbtwlux6An6EEM+g4HlKf4bTj2vSPPJvzFz3AE3pEHEWhKONjyO9hevXoldu1b7ekHB3cp
uSRzbCNAj6sWrBpKNa6eUjWwHK8/PF3bnmNwzci/sjKjX3MZg3tFlgbj/si4Ddt0QWX63THbNWFbZ2yE
7YP9xyeHKTm4oWvrWcd7AG6gZW0qvbD/DQAA//+1HLjfjA0AAA==
`,
	},

	"/generator/template/ts/ts_service.gots": {
		local:   "generator/template/ts/ts_service.gots",
		size:    3356,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/9xUXW8UxxJ9n19Rd4W0H1pm8JUu4q6vr+Q4TmQJf8iYl7xE7Zlab8Ns99Dda2NNWoIQ
Q5AMtoSFktgJRAkRCh9OpIRgg8Of2dk1T/yFqKdnd+0YG9viKfM00111qs6pmuOVSk4JpmpUQpWGCFTC
DDIURGEA0/OQjwRXnEQ0n4ahjfI5U4QyCVXBmUIWwODECPg8QFA1omCOi4swR1UNVA0hpNOCiHnIk8uU
y3zZHAqscoFloCovQeClBhUY2OQszLRCmVQkDDEAylKoSPAL6Kusl16naWkqYU5QpZCZ8Kn5CM/5gkad
6DQmEnyWBiiBwDSR1IeGJDMIVS4sBRKGQFgAdTIPDDEAElxoSFVHpoD4PhcBZTOgOMgIfVqlfqelDgkb
yQKQVDWIopw5JTh5+Mcpwfb6g9bdG80Xz9or91pfLjc3b3eG4JTA3iSLC8nyo+Tmrfaj9e1frrVXHg5O
jLS/+aL54of2/atvXi4mG8+aW6/aKw/bjx83n99s3d1INu+kwr55uQjJ6v3Wkx9fr13Z/ulq89W32+tX
06vkyVfJ2sPm5u3X32+0V582nz/pFby+YLEt6i5xt9cf2E6z0KWfW0vLzT9XbXuDEyO2w+TeZmvtca/D
p9+9/nqhdW0huf57srS+fW3L9tO6v9G69TRZ+KO5dcf2Yd/N1a+fN5/fSpYXt68sNrfWkhubrdXfWisb
TslzaD3iQkHKowwxDJqXCcHrVCJos6j1zmb1d4JjBwAgjgVhMwgn1HyEZTgxzXkIlQEozKAaSQM/JIoY
xhLcjxrMN0OVRa2z7JM2E7QuQ3aELNDa6VR1vYAosqNsd3HPi7AMNaWiIR5gGeokGuL1OmfDQnAxlYJ2
MWoYRijy/Y7jlaaJNLmQLK1bBUqe43MmFXRuBiBncCue1/fff7t9p8+4fX3/cU+fqpw5deZUrt/xPGhI
tHI5TkrCD4mUY6SOhrw71P06qbWNsDL1JNDaJtZR1XhgsnIRlyqXZpgbWgW8lOp4DsUs9XFUBeCOR1ZA
yH08PNUL3gkzg10UK2UagEYVc59C9jTqIWrt4OVU42rWJMSxa1hoXYiIIHVZMScjLGook6t1sQLZlvwv
jt3xhurewGfAcBbF/7M9CVFBQ4QVkEoYExjYOcZCJnwZcnHck1LrXHqS9ZAr9qdQngcKpUrfBaqGYHYS
bhxnMmhdaBi0OKZVYNhVx0qjtSUTxxhK1DoG+w06E6yYQpvHVTVkBYESBjpEOo/nQY2wIESQDd9HKcHs
6a4QWjWprlRENST8a6C7rO7Y+OTo4NnibsQdfDJRXYHGHVMUgw5EQhzbUe5s0zzaORBH8nAW/wa0a2A9
NF10faL8WgGF2MtbztHszqBGnEnMGL6Fjk8k9lh/MPLJp8OTk+OTlT2B+3PfVSjt/SAV9hYdGh8dHR87
qK5ZTVt72BB+i5HsbSJbxcOOLwN/V68jY1PDk2ODZ9+DSntLBVgljVAdBZXhHKQiFHLn2UXG55j9zBX3
2z1d7Hd6xuPEsVfquGUVlV870Ar/URaVyQ0T4+emdlpVKkMhhtSgrC9VIG+sP19OLaTStaPiPvbzDus5
ou0cz3J6Iz+u1exvM4e2mEPby/uwlqPYyrF+0qN5wbFK7OsBx///tbP3vy95Wv8VAAD//3D/Xf4cDQAA
`,
	},

	"/generator/template/ts/ts_service.govue": {
		local:   "generator/template/ts/ts_service.govue",
		size:    2781,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6xWXW8TRxR9319xayH5Q846qlQJmQY1hLSyROIoBB76Uk12r+OB9cwyM5sQbVeC0kCR
AkQiQm2TFqqWCpWPtFJLSSDlz3ht88RfqGbHXq8bUEBqnjy755577rl37qZSKlklWGhSCQ3qIVAJS8hQ
EIUuLK5C3hdcceLTfAJDg3I4U4QyCQ3BmULmwuRcDRzuIqgmUbDCxXlYoaoJqong0UVBxCrkzwY4j5IH
wsF8Wb8S2OACy0BVXoLACwEV6BqKEbCWRZlUxPPQBcoSWl/wc+iovq6h6kQGlbAiqFLINHxh1cfTjqD+
AJ1gfMGXqYsSCCwSSR0IJFlCaHBhyiGeB4S50CKrwBBdIO65QKoWMgXEcbhwKVsCxUH66NAGdQaSBqUY
JHNBUhUQRTmzSjD27n9WCXo79zt3rrWfP+1u3u18s9HeuzloiFUC8yZeX4s3HsbXb3Qf7vR+v9LdfDA5
V+t+/3X7+c/de5dfv1iPd5+29192Nx90Hz1qP7veubMb793O2Pv6xTrEW/c6j395tX2p9+vl9ssfejuX
M4D48bfx9oP23s1XP+12t560nz0eJr+6ZvKYDCNG93buG9V96K3fOrc22v9sGamTczWjNr6719l+NFT7
5MdX3611rqzFV/+Kb+30ruwbVZ17u50bT+K1v9v7t40O81u/+uOr9rMb8cZ679J6e387vrbX2fqzs7lr
lSoWbflcKAhhird8zpCpMpwNECI9uy3ILwc45gvuo1CrYy46XBDFRf7YIDBjQyZCDCYzxYUWAEAYCsKW
EI6oVR/LcGSRcw+qE1BYQlVLgCeJItolCfanAXP0UMhiFPWjx0wkRFEZ+o+QuVFkDeTaFZcokkmbDv4Z
4ZWhqZQ/xV0sQ4v4U7zV4mxaCC4WEtKUo4mej7pI62yAdiCxkCmzeMyyPkndsvBiksjFBgk8BY5HpIQw
tKf0j1nSwigCvKiXgEyMNUZUKnpJSCUCR3GRPMqcC8U+TP/JwEdRKCbnyBpEnyAS4YzwkrMv6DJRqK+p
rrMKUgl99yYgpyuuVioed4jX5FJVj44fHc8N7XQGMnUbhqJhLOO56dmwH9l2tFA1uauDcz6XKjcSSBuA
F5LmnkaxTB2cUS7Ydd90FXKfTS+MBmTplnCEzfQ5BaJum8Yl9MMmDtlTtG26UPCJIC1Z1U9qzA+UxkdR
sQpzgreoxFP0PH4chnY9UOlb+BIS7uMQWmlHPFQQjNicGbKCalJp9ztRzoXh0OIoypUhlwrK6UkacFYq
sFA/Wa+CiwpFizKEQOq1rSra19GFqvcnSpUGC1SB0FufSvuI7rgdhn0ro6gQ6Mkf9INharJxOIqML2GI
nsQoCs0x6jtetFUTWSFNZdJJmDieGdFMEU3CXA9BBo6DUoK+jTAGH46PHwDTRkGgtKUiKpDwwUR6Oe3Z
+vzM5KniQf5Mrf2e2QL1FyVhSnIRffnMdERR8QBDZB3KJ7m3jP8hHJmJUdaoPHJEIRJvtBdcf8Ih0SK1
I01N9tH4eBkYB4ZK/xtwQI9cocppFlAIrcXnTGLfo7cY4uhNkHp3ovb5F9Pz8/X56hvBb3dwJGFS+WFe
Hkw+VZ+Zqc8ell9fH6NhWpv1hlV8UEzx2HuWkyZ4F9212YXp+dnJU/+Tc29O2f9CvC87wxWzggq5M+w8
4yvMHHPFw6Z7eOq7N7pKI+vfAAAA//8TYlZo3QoAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},

	"/generator/template/ts": {
		isDir: true,
		local: "generator/template/ts",
	},
}
