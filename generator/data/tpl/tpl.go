// Code generated by "esc -o generator/data/tpl/tpl.go -modtime 0 -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/echo_enum.gogo": {
		local:   "generator/template/echo_enum.gogo",
		size:    307,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3yOMWuEQBCFa+dXPI4UCrn7AQfXpgyBQBqxWNaJSHSU3bUIw/z34BolNuk+Zt/b983O
f7mOoXp729CMKH3P+fTqRjZDL4nITxITSgIA1SuCk45xe+l5aCPMfh/2jurTjo/1/OGGhY/UFSytGVVE
n4t4lH5q/yxWeE+hl66sEDNAqRA3csT9gdHN9RFttoDmj/91O/ndcTn48nwqb2aFERWB0xIEebleFRsy
+gkAAP//weE+rTMBAAA=
`,
	},

	"/generator/template/echo_service.gogo": {
		local:   "generator/template/echo_service.gogo",
		size:    1306,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xTXU/cOhB9jn/F3OjqKkEhy31dxAtoSz8Ei5ZVX8E4sxuXYKf2BIoi//dqnGzYFuhD
8+TMzDln7DnTSnUvtwh9X14NxxCE0A+tdQSZSFKDNKuJ2lSIJN1qqru7UtmHWSPvPEl1P0NV21TkQsxm
zHIpHzAE0B6oRtCG0G2kQlDWkNTGg2yamOKAs02Dzgt6bnEfPKF6kfT9IThptgjlBVJtKw8hCABgwFpT
gyFkB31ffjJtR+vnFkPIIUaWHU2hAg4WzlmXj9BDQFMxUxCD/Ap9a41H8OQ6RSw9haaG+gC337w189SN
ufRWJJE4GQUgfmMVciS9ZZG37yE2nVFwM9395qM0VYMu8+4R+v7fMZwDP3M5Jj8wpheJQ+qcAabI1FBx
Zg3hD8ohQ+cgyudcmmgD8xMw+JT99lSCkxsuhRNQ5ak2VaZNfhwj/5yA0U0kSPjGzDG9SowOl5/DJT7F
U/b/0dFRweC84HwYoLFRVX6+Xl5mbKfymiR1/lRWK/zeoacCmD8XjBBJYjsqhvZXo6x3j+XexLXh2rd7
2v3NgWnES5MJvHAWO6l3m1t+mZpim+x5hr2+wq32hO4Xz3ceKyALd9pU4GxH7O444lflGcJBHNlC1baA
Yd7TuPvJpu95/xD0BgxCuWxJW1N+lU2HkF4tr9fprgrL88U6S+NyUx1CWrxjtfzVWvxZ5XyxL8Kaf6fy
ehdns8lKcOZQEvphZrDbuOE9J78pWyHE45mtMJpm5/txIV825b8Y6LlwDiqWX6D3cotzxpQDYx6ORRA/
AwAA//8kN6FCGgUAAA==
`,
	},

	"/generator/template/echo_struct.gogo": {
		local:   "generator/template/echo_struct.gogo",
		size:    190,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/1zNsQrCMBDG8T1P8dHddHcVHMXBB2hoz1JN05ikQzju3eWoiHb78wv5Lrr+6UYCs71u
KWJM2yqcvMv54malUiPtDLmktS9gAwDMByQXRoI9T+SHDJHPg71NxesHzRq1ukdewrFhtttWg/uS5j94
rZTqr3TfOxQGXRfzDgAA///JHl5qvgAAAA==
`,
	},

	"/generator/template/php.gophp": {
		local:   "generator/template/php.gophp",
		size:    2425,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xVTW/jNhC961cMBAOWAlvrbQ9dxI2LNEm3OSQput6TEwi0NLG5kEmFHCbrCPrvBfVl
SZa3RXkwTHjmzeObmedff0u3qfPh7MyBM1huuQaugcEzTxA2KFAxwhjWe0iVJMlSDt4rKs2lCIx5N0Ek
dx/qn3yL8blJYnQOWQbBku8Q8tz+eP0A9w9LuLm+XQYOnH1wHMF2qFMWIWRZcM92+MVe8nzuOEYj3HyP
MCUuxby4fjbv7wn+SZQ+XiUcBQHTYK/lbe5kmWJigxDcodZsgzrPnShhWkOWEacEoSiS507mAABk2RSq
jD84JrEuiAJAqvgrI4RRRcsyKhNQxHWMWSc8gmcjIksRXlnCY0boMaXYHkYKdSqFRr/MLD5/WNQe/gwe
1xrJa/JXbkPCffL9FlKJZnO4flh/w4gguGbElvvUSj6iLdfTRZMNFyDwrS/FqULzLANMNA7iDOcUKY0+
9uQFRI8ybZV8K6g0/fXccYMztjMoJAF+55pcf35A62h4qJRXvRluZa9NGilsanlZNqhenvdUqjt/GIh+
W4dU6k1P7gwy2nQY9XEVklHiCH7eefnpqSQZFvN4Cnf13+ayDDihVWsG4GJxRHW6OJCY9BDLCfsXgEn7
gcftt+ep1iN36uB68bsrb90KI2tQo23LOQa1C8NICk3KROSN1kzjV8XhAsYff/olmAWz4OP5p9mn2fjE
JBzgq8U7OJXXUWHVudkztsVCo/i4kKMqPTmOI75DaagI+3nWDXhqbn53/Cpva54ZsSS5TLk1gpcJjHZI
WxlPYGQUn8BIGkoNWQ2P3hkzYnDR4z/+pqUoeSt8Ge7902GnGyex+9IXbrpQ+GJQk9dnZUv7bRT2diUF
lWI3mNPFBul3Ge89v/hahWjPrzpe5EZNoqUexhjJGL0W5ARIGWyVa7l0lbxyUSmpBgx6yO2OslburvzH
ssY74HdDBetHDtS0ApiknrtWC70Weitwumj+vAbxu0m1I5W58/9h9ldMWIN/5iKGpv9rGe/PwYWg3c0j
NXpef1eMhT5hfm2fD25Faqg0rGI0f2y03aWwBmXX947iPHfL+9e/b4vvYXh/eXfz5a/Lq5swhADcx8cs
Cx4KzSt/bBaw8qbc+ScAAP//SLLRKXkJAAA=
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    813,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6ySwW76MAzG730Kq6dy+OcFekFIf6EdGGhDu7utKRHgZIkjhKK8+9RSaA/bpCF6qvL5
s7+fE4v1AVuCGNXm+ptSmWX6ZI0TMK5V3jrN7c7hic7GHdSZKlVpbhQyG0HRhtWSZIXWam7Lv1o3xj/s
fSNvDXtamObygPkzkJerN7OhOuoasPLisBaoj+h9t5VXPFFKC/QEMQMAiPEfOOSWQK1I9qbxkNJd0Ttg
ArW2/YwPPAaCfPl/m9+K5hPgIu/XLvuU8tlVnSL1J0OwGNU6iA2yvVhKaUzWtSvmE5hOeuGxUvNsSN59
jiQ4Hu2F5lnZqyMDcdOl/Z1ps36fQI0P4BlMS5LiqRT3a/1x5DfzyqHVrVPKvgIAAP//p1Mu5i0DAAA=
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    540,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SPwWrDMAyG734KHbtD/QJhMCjsUMbIoS+guW7m1rGNrIQVo3cfTpotZbAxnySDvv/7
E5oLdhZK0e08ijRKuT5FYjCx1yfMbOmj9/qM5pJj0BhCZGQXg97nGHZkkSM1/zpqKSZLfP3OOuOIemDn
9YvL3CiVhjfvDBiPOVe/XR1esbciUBQAQClbIAydBf3srD9mkek/kRuRLZxcQF9P9zji4ZqmywK6QqD2
XCA2HEFETfvTqtNMmz3uDTZ1jYFpMNwiYS/y8IdVffzusl4pwOOvQnW9aZVyx4Tt0vXLblWys1yxB8e+
cjeLWn1keaDwM1ZuMUu2qM8AAAD//0qj1IMcAgAA
`,
	},

	"/generator/template/ts/data.gots": {
		local:   "generator/template/ts/data.gots",
		size:    584,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5yOQWsaQRSA7/MrHl6Epeq90IPFLRSkSJFeSinj7lMH1tntzGypDAOFGBIhBiGag4fk
FBAE9RRIzM9xd/0ZYdVFc8jFOc3wvvneV7IsYkG9zSQ0mYfAJLSQo6AKXWh0IR8IX/k0YPk3mONzRRmX
QD0PVBvBpYqCVCJ0VCgQGsh4C0KJLjC+BQ5WJUGi+MsclMSCwimHWLBZPMS3F+vVYzK6jy+H6+frrJRY
sJtEV+fRcFaufY36g2S22CzPktE07v+PXsbJaJpMevF4GQ/myeomvutF88n6qU+sEtG6AILyFkLR5mFH
gjEE/wW+UIA87IDWxW+0g8aAJgAAWmf4F4aeu+VhN8jAT+n9B/VCNOZD9gm5m6Jmu3D/OF5eoYrWuwEe
BzCuUDSpgydUfEwZJVPlQW6M1qwJ+AeKVdpAD3LV8me7+vu7XbPLdbuSM+bnL62Ru3vfO+GvAQAA//9s
n4weSAIAAA==
`,
	},

	"/generator/template/ts/helper.gots": {
		local:   "generator/template/ts/helper.gots",
		size:    2447,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5RWbW/bNhD+bsD/4SZslVS7UrZ1QKFMTV/WbR2GuouTT4Y/MNLJZk2TGkUp0dr894Gk
JEuxhaYBAoh3zz33yqPDp0+nEzD/8ConkuyhIgwIFEpSvrFyiaqUvADCAXkiUkwbNagtUZAQDjcIJM+R
p6AEkJxCKZk2DqcTvMuFVJCVPFFUtBReRVjU0PjtB3yeTgAArMMGeX35/q3Y54IjV9rKDyzIAnNGEvTC
H56fhRs6B/eVe1r/82urj0b0Pz0PN3Nwvx9Tv7Xm8zH9mTGfjah/eWPNV2P636x+7frn08n9dDKdNJ2B
NyVlKRC4vvwbbuqmyrpWpluFrrfaIiBP+00sJYPIKG5IgeaYCWkEBcqKJthHN1TWQOK/JRYKxM0nTFQA
GGwCY/wnMiYuG+2tKFmq265NLBREBqrOcQAcTFAE3ShBVjIG15K1rX9mfPzx7kpnucM6rAgrEXJCZWFJ
8I7sc4aROem0tHUMzlapPApDJhLCtqJQ0YuzF2eOQRG5gRg+c7LHCJxb5JtbpM4cOE12VqAo4c69Abex
xS/hJOWFpok7lieaJO44RqZ9gxwlUfhPibK+luzXq5deKbvRnze1j+Dq6BbQDLzvrNpvZb3bUUp2boVm
XvQHQ6X5VAExrNbnWmwVurSe1u6wBsrhBKvWVqSlbP0v7BDkUiihextsSbG45R+lyFGq2tth7Q9o9J/e
IHHjY7XDet0j7WJtPRhwHAPX8/Dli5kgkUErdkueYkY5pu6RH1uIMXKT7lwTFT1IGGqvtAAiJamPQgmU
WJomeL51v2pm+7WGr49j2EFsijoDd7V2+7EAsgJH4Ef1Mh2rCBstlcYEmZDvSLL1Kj2jD5i7xFKicKgy
uY1m9jtleCIx4xRi0Ibvl4vW9vwY1Xm2hENAUwYdQttZ696Cx/3+tVx8COyFoFntVQ893w+PZuyDvCy2
XvPA7HzdlNiFWffk+H6vuv7h9rTjUqCkhNH/MP1oN2Lc8H4SlHvuE7OdD5fzIXyQi165sxj0ZQ8oT/Fu
kXnuhWuL/+xHuAD3woUINCvMjlwPgztc+eHr8HDlP3bhN6IPZI99COgN18e1a6wDdnvtgGzW8jds5b73
GBzzXCytzAIGbmNwlqQ2IOdRezrsEwat7Vf286nV3IvzIOzH9rUfMGYGwAkd2+Au6Rk4gTMbUNln//8A
AAD//8c9h/ePCQAA
`,
	},

	"/generator/template/ts/ts_service.gots": {
		local:   "generator/template/ts/ts_service.gots",
		size:    1592,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/4xUX28bxRd9t+TvcGX9pPyRs5v8JKrgKEgRApQXiETgfbJ7bU9Zzywzs02j1UoNwS2V
nCZSowpIoEFQFNEkBglK7Db0y+yunad+BTQ7u45d/oh52plz7r3n3Htte3a2XJqF9SaVUKceApXQQIaC
KHRhYwumfMEVJz6dMjw0NIczRSiTUBecKWQurKytgsNdBNUkCja5+AQ2qWqCaiJ4dEMQsQVT5Dblcqqq
HwXWucAqUDUlQeCnARXomuCcprVQJhXxPHSBsiyVL/hNdFQh5lprVptK2BRUKWSav77l44eOoP6InpF8
wW9RFyUQ2CCSOhBI0kCoc2FMEM8DwlxokS1giC4Q92YgVQuZAuI4XLiUNUBxkD46tE6dQlRhwzCZC5Kq
gCjKma4/99+Ppg+7T9JH9+LnzwYHj9Mv9uP+g2ISGjVQ0mkn+0+T+7uDp93hzzuDg5OVtdXB15/Hz78f
HG+/etFJes/iy5eDg5PB6Wl8cT991Ev6D7PuvnrRgeTwOD374erozvDH7fjlN8PudgYlZ18mRydx/8HV
d73B4Xl8cTZW8W7bJDdpJzs87D4xYnPu3k/p3n78x6ERuLK2ajQmj/vp0em1xvNvr75qpzvt5O5vyV53
uHNpFKXHvXT3PGn/Hl8+NErMt4Z++Sy+2E32O8M7nfjyKLnXTw9/TQ965dKsXS7Rls+FgsxLFUJY0R9r
greoRIj0xraKFVsascNyCQAgDAVhDQTr3YA5enIyigpkDqxV5gdKm4a5KKoWADJXs4rUlu0SRcZzj9b0
I+HBNa2Jno9CE8sle3aDyAxP9rrGjfbicCYVFNAyVJpK+TXbXnjz/9bCjUVrYeEN68Z8bXF+cb6yVC6F
4f8cj0j5Pmkh1JbBent00wq1h7/zh7cznfX8DcLQ0jFRNO0TQVqypl9G3qNopjbZ1Lx5HioIhFcDqYT+
iSyP+57OTVQr4yKjqFKFyqheZWbJpLJtUCiVuQhUgWBmoJb2QOvAEKwPfK3W+ph4AULlvXfWKxBFPpcq
DNGTGEUNVPl0pgPhVSEM/zUy81rEhmDuEOUpZowYfSzVRDYtUMLyW4X54tg2NAlzPQQUgotJkNZBh1l6
QawMn3k9vji56bzFlkD9D/N68GRo9E9KZOA4KCXoyEnOX6pI7t1CXWYsd6Snkq1Pvunl0p8BAAD//wIU
nek4BgAA
`,
	},

	"/generator/template/ts/ts_service.govue": {
		local:   "generator/template/ts/ts_service.govue",
		size:    2245,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/4xVXW8bRRR9t+T/cGVVsh0567wgVS5FlFJQJEQimuZ9snvtnXY9s8zMJo3MSg0hLZWS
JlKjCkigQVAU0XyABCVJG/pndtfOU/8CGo/XXrtpyzzZd869c865M3erY2P53BjMuFRCnXoIVEIDGQqi
0IG5RSj6gitOfFo0ODQwmzNFKJNQF5wpZA5cmZ4EmzsIyiUKFri4BQtUuaBcBI/OCSIWoTgb4BcoeSBs
LFb0lsA6F1gBqooSBH4ZUIGOKTEE1rwok4p4HjpAWbesL/hNtFVKbMC7y4NKWBBUKWQaP7Po43VbUL8P
74J8weepgxIIzBFJbQgkaSDUuTCCiOcBYQ40ySIwRAeIczOQqolMAbFtLhzKGqA4SB9tWqd2SioVY5DM
AUlVQBTlTJ8//v+XhncOnySP7kXPn7U3HyffbkQnD9Ku6F2zFa+uxBtP4/tr7aeHnT+W25u7V6Yn2z98
Ez3/pb2z9OrFanz8LDp92d7cbe/tRUf3k0fH8cnDjMevXqxCvLWT7P96tn2n89tS9PLHzuFSBhDvfxdv
70YnD85+Pm5vHURH+5nT766Yg8wRw253Dp8Y4j3s+u/J+kb075Yhe2V60vCNH58k23sDvgc/nX2/kiyv
xHf/jtcPO8unhleyc5ysHcQr/0SnDw0T81tv/fl1dLQWb6x27qxGp9vxvZNk669k8zifG6vmc7Tpc6Gg
BVd50+cMmarAbIAQ6kvchOJ8gOO+4D4KtTjuoM0FUVwUL/UzM15kUkR6RwfAVj4HANBqCcIaCNYnAbN1
62UYpjvWJPMDpX0KQ6jowFSgMpEUh8zRSSlHq+oQRbJH9a/9DeHBAOai56Mo5nP53GyAViCxlKFfvqQ3
Puwbkc/h7W45B+sk8BTYHpFSs7qqf3xOmpoU3tYvXXZN60msVvUokEoEtuLCxDKBUjkF6iUDH0WpbAKh
ZtAr8RGRCDeEZwK+oPNEoX6QWlQNpBL6lV2GgquUX6tWPW4Tz+VS1S5OXJwopF5dsFOyULsMA+owsP0t
DTEiSz4RpClrIy0q12Ba8CaV+Bm9he+PtusruCYEFx9k1eo1/M9DBcGQoEzvSsql0upprhSyasKwUIFC
n2JBd+9NZ1SrMDP18VQNHFQompQhBFLPRlX1uRwZWnpGoVTDFQSqQOgBS6V1QRtutVrjQOvAEKwpX9tm
zRIvQCh8em2mAGGoC7da6EkMwwaq3qUtBcKraGffkdz1O01vmb9hr0bZUi6y0jBBQ1LC5dfsTpe+gdxD
y+ONkkA57NeQV6jbBi5hjkdZ43wYresiln54VhdffsOxGfcYLpgrMZp6fmZ4frhXrF9CoPQ5kwhEjk6M
cySGlddjRq92Tqvn+gtsYhJkYLu68HsTExVgHBgq/RV/t8NG2KW3Shj4UbjOm6hcfQMXBGeNwnmZI35k
IeHoZMzn/gsAAP//gM8Tf8UIAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},

	"/generator/template/ts": {
		isDir: true,
		local: "generator/template/ts",
	},
}
