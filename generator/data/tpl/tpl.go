// Code generated by "esc -o generator/data/tpl/tpl.go -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/helper.gots": {
		local:   "generator/template/helper.gots",
		size:    2449,
		modtime: 1531291876,
		compressed: `
H4sIAAAAAAAC/5RWbW/bNhD+bsD/4SZslVS7UrZ1QKFMTV/WdR2GOoiTT4Y/MNLJZk2TGkUp0dr894Gk
JEuxhbYBAoh3zz33yqPDp0+nEzD/8ConkuyhIgwIFEpSvrFyiaqUvADCAXkiUkwbNagtUZAQDrcIJM+R
p6AEkJxCKZk2DqcTvM+FVJCVPFFUtBReRVjU0PjtB3yeTgAArMMGeXP14a3Y54IjV9rKDyzIAnNGEvTC
n56fhRs6B/eVe1r/62urj0b0vzwPN3NwfxxTv7Xm8zH9mTGfjah/e2PNV2P6P6x+7frn08nDdDKdNJ2B
NyVlKRC4ufoHbuumyrpWpluFrrfaIiBP+00sJYPIKG5JgeaYCWkEBcqKJthHN1TWQOK/JRYKxO0nTFQA
GGwCY/wXMiauGu2dKFmq265NLBREBqrOcQAcTFAE3ShBVjIGN5K1rX9mfLx/d62z3GEdVoSVCDmhsrAk
eE/2OcPInHRa2joGZ6tUHoUhEwlhW1Go6MXZizPHoIjcQAyfOdljBM4d8s0dUmcOnCY7K1CUcOfBgNvY
4pdwkvJC08QdyxNNEnccI9O+QY6SKHyP6kay369feqXsBn/eVD6C66M7QDPwfrBqv5X17kYp2bkVmmnR
HwyV5lMFxLBan2uxVejCelq7wxoohxOsWluRlrL1v7AjkEuhhO5ssCXF4o5fSpGjVLW3w9of0Og/vT/i
xsdqh/W6R9rF2now4DgGrqfhyxczPyKDVuyWPMWMckzdIz+2EGPkJt25Jip6kDDUXmkBREpSH4USKLE0
TfB8637VTPZrDV8fx7CD2BR1Bu5q7fZjAWQFjsCP6mU6VhE2WiqNCTIh35Fk61V6Qh8xd4mlROFQZXIb
zexPyvBEYsYpxKANPywXre35MarzbAmHgKYMOoS2s9a9BY/7/Xu5+BjYC0Gz2qsee34YHs3YB3lZbL3m
edn5uimxC7PuwfH9XnX9w+1px6VASQmj/2F6afdh3PB+EpR77hOzmw+X8zF8kIteuLMY9GUPKE/xfpF5
7oVri//sZ7gA98KFCDQrzI5cD4M7XPnh2/B44X/rum9EH8ke+xDQ+62Pa5dYB+y22gHZLOXv2Ml97zE4
5rFYWpkFDNzG4CxJbUDON23psE8YtLZf2c6Xoji5nnuxHoT9+L72E8bMATihY5vcJT4DJ3BmAyr78P8f
AAD//6tj6RqRCQAA
`,
	},

	"/generator/template/interface.gots": {
		local:   "generator/template/interface.gots",
		size:    141,
		modtime: 1531291876,
		compressed: `
H4sIAAAAAAAC/6quVihKzEtPVdBzSSxJDKksSC1WqK3l5UqtKMgvKlHIzCtJLUpLTE5VqK7W80vMTa2t
Vajm5VJQUFBA6HTLTM1JgWhTgMhAlVqBFMENhiuorlZIzUsBc2t5uZB4gAAAAP//KkQF540AAAA=
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    733,
		modtime: 1531291876,
		compressed: `
H4sIAAAAAAAC/6yRPW7DMAyFdwO+A5HJGaoLeAmyBB3SBkUvQNusIyShVIlGEAi8e+Gf1h7aoWk9GXp6
eh/5PNYnbAlSMofxV7XMszyzF++CgAutiT5Ybt8CXujqwslcqTKV5cYgsxMU69jsSPboveW2/LX34OL9
5heK3nGkrWtu97jfO4oymfPMd9XZ1oBVlIC1QH3GGPvlPOGFVLcYCVKeAQCk9AABuSUwe5KjayKojtJm
MVGxGlYrR9XVepKXzOPRlJuSee7Ed/J686Q6B/cPFpsFbS898nzT8voTrP8CSRd49heW1+Uoaz/ngDF3
9j+QO5Li71hfu/8x55uQcu6EuBmK0Dz7CAAA//9JGMaw3QIAAA==
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    436,
		modtime: 1531291876,
		compressed: `
H4sIAAAAAAAC/4SPwWrDMAyG74G8g47doX6BsdNghzFGD30BLfUybY5rbDkwhN59KFlNC4XoJCH+///+
hMMPjh5E3GFdVR/7ru9oSufM8I0zusoU3BsVXj6pfgQaYAhYiumebXnHyauC9B0AgMgeMsbRg3shH05F
dX2kTDOyh0+KGEz8ijMef9OiFXBmAwvBxcbHE5j6X79m36bu7DxHznXgA2acVB82SWz4i4q7ioWnDQi7
G4vIjTHsW8kGedVu9GzeR+Jg5rtGaJM91xzvhOslqiFo3/0FAAD//37u8AS0AQAA
`,
	},

	"/generator/template/tsconfig.gojson": {
		local:   "generator/template/tsconfig.gojson",
		size:    687,
		modtime: 1531291876,
		compressed: `
H4sIAAAAAAAC/2SRT28TQQzF75HyHay5cKB/oBIc9txLDxVSkbggpE5m325MZ8eD7WlAqN8dbdIkNDnt
Ws9+49/z9TW5JSkDj1c/Tcpy8Xe5ICIKSabKGfqlOkux0NGrQhRMmibcxxo6cm242Cuz3ZqNYuaxGG3Y
1/St4Z3RSmVjULJWq6gfrDzqCA8dBdincGaEElcZRubKyaHEZYCiJNAgSn30SFWlQp1hJIUe57nH46rb
wdDRELMdFw1F7qaaObE/wJtuAU9ReKBmXEbaYFVjeqKb9yRKKjm3ekEulPEMjSPIFSBbxycuY3d4ZJK+
Zezgbj58/I/vVXqASW5zwHNTkR5vIlD8aqzot6y7VZ4bLlOOZpfzgaSgHLPE7wrlCcVjvkUSjS56BhYw
sR/ke3icUzzrijnL5uuf4ms4p1sMsWW/m+bjnVtmXoWOvu9rotDLdEShk+tu688n9RzQVVWZ2BD2yo/d
z8v8eVku/gUAAP///d4K2K8CAAA=
`,
	},

	"/generator/template/vue.gots": {
		local:   "generator/template/vue.gots",
		size:    1407,
		modtime: 1531306079,
		compressed: `
H4sIAAAAAAAC/5RUy27bMBC8G/A/LIQAkQFHyjFQmqJo0jQF2iZok1yKHlhpLQulSGa5zAMq/72gZMWS
YvTBkz2c5c7OrF3VRhNDA6e6Nlqh4iXcOgQPK9I17N87PDCkDRI/HRSYaxKsaf94PttU3jr8glY7ynFQ
QhtoQGzmMwCApiGhSoTk3KmcK62s9/1N8kEZx9dPBr2HZQAuHQ+QnoeqCEW9xiRtmuRMsAi880qi98O+
UKJCEoxX2vINyeUz8B7Dd9i+c4HSIO3PZ/PZrcPEWYwH8y2Ow8WbZ6fmM3xsWxS4Ek4y5FJYG2Sfhg+f
RR1U4yOjKmzr6saDNIVcK8vkctbUYQMgXvTEcKwzSPGiA3xQsHnirbAINyQ7wFB1Lxjhh7B4QzIDy1Sp
Ek4gWjObLE2lzoVca8vZ0eHRYdSbuZf3YiE7ga102Obyh8S6IWMjSNTZJMJFBlek68rix+onvprE+e07
/IJ3RJpeD8ft3q1WEOMdJBfM5hMXEJXI0aLv2580hWoFziKUyDC+a/0EN3JinHvM68omG7+W0I4QIh4r
QWlDittWRtv/6bVZunGzaGi799ESomcvox0aun2fjH59eXaZQYGMVFcKex/SVqDIc01FkMIaCO8cWh6/
QMiOFLS69sKKJE3T++197EguEl6jisdlXak1WlmEkxfRDS3REhOpy7inTwebKOlpSSFYgLDT3/+Oar98
iWFYqX9U1nL/IkvhQ7emcfRV18jrYOoDaVVGuyonOQ0pfvr/NZ/9DgAA//8kJDz1fwUAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},
}
