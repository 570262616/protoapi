// Code generated by "esc -o generator/data/tpl/tpl.go -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/helper.gots": {
		local:   "generator/template/helper.gots",
		size:    3525,
		modtime: 1530604495,
		compressed: `
H4sIAAAAAAAC/6RX62/bNhD/rr/iJnSVlDhStnVAYVdN312Hog7y6JcgHxjpbLOmSY2knHiu/veBD8my
Y6MFFiCIdPe7+/EeumPoohJSwxreikUlOHI9gK81QgMTKRYQLWs8qaSoUOrVSYmFkEQLGY0Cb/i1xgtU
opYFOovQWEgvCkdB8LXGtFYY95DJKAjWa5CETxHSd0STq1WFCpomoFyjnJACYb1Ov5AFNg2sAwCAjcEH
iqy0aHAKDxwajHXX6tZrQF6atybYPAfZ0VEAR2B+X1VEkgUsCQMCSkvKp1YsUdeSKyAckBeixNJrQc+I
hoJwuEMgVWV8agGkolBLFsBRFkxqXmgqWst4SdjQWyftgw/K0Xjg9cWnrgrGKEldgBZXMVJgnP367DSb
0gFEr6K96j9eO/Vwv/r3Z9l0ANGTA9q3znhwQH1qjY/3a/9844xvDqjfOfVtlIyCTQ3e1JSVQOD64jPc
rXxCTX5sXZRJrZ6hqVyvWrVkMLTyO6LQvk6EtAKFckkL7IG9I4eX+E+NSoO4+4aFTgHTaWpt/0LGxIXX
3oualaa+xsRBQUxAryrcAvY7ZQhdy8CkZgyuJWtrfWIpPr6/MiHOcZUtCasRKkKlsj7wgSwqhkPbkiYm
Y5xDONO6GmYZEwVhM6H08Pnp89PQgIicQg5rThY4hPAe+fQeaTgATou5E2hKeNhYj+3J8pew1+OZcZN3
Xp4aJ3nnY7unp8hREo0fUV9L9uLqZVzLrr0HPttDuNrtdDqB+BenTbyo9wHUko2srAnsH4bauNIKcri5
HQVOarIYG9UcV0A5PHZnlEvifbW0Y1fsSgotTA3TGVHje37ux1o8x1XSd2J+zEDIPcHNHFe3G5f+iK13
i8xz4Kbo37/bLhETaMVRzUucUI5ltMvhYt/r2AY5ME7URp9lhpAqIFKS1e4hUi0ubcLjxBHf+M59bdC3
j9jnkNs8HkN0cxv1TgHIFO4H76bIlmdJ2P7sGEA6EfI9KWbx0nTfttMunpJo3NLYkA4G9IEyfByPZYQc
jN2ny3FrOnoE6miduy29D97wt3V03A57kPTvy/GX1PU7nazi5Q5ts/VmGzutajWL/YaYJ6YMeQTH3c5I
kk1Kk/bbaFtDoaSE0X+xPHfTLfdOvwnK4+ipmbHdV7cL7sdgRudxDuYbTikv8WE8iaOzyCX85Dc4g+gs
giEYl3D8iLd/rs2XHOxdsYbqJ0e2l5it3keAGVM9WDuTOlw3pDqgH6w/PVb7zDmEdthfOpnVb1HmEF6S
lcWEPzNms767tDXdP17Phdo7X3sH3Aj7p/rBTcMWHMIsdNXsgj2GMA2PtzzZNf2qu5EE+GBvfCVOSM00
FIwoZS5fb82Dv6rhg0ZeKnuFdLyF4ErLutBCxv3OU3WFMk76Qz/L4I1pjmtzjzLfiaRLorGtXBfQ4Qq2
bsyq9RfA9EMvpKaJbeuYm2Lql3jTJEM4l2JBFX6mc3xhVaoSXGHT3NzCd3gvpZBmevVH8dX43XgIJWqU
C8oRaoUwRZ1VQmkgRSGkvcdo0V46dua4wRtsJ7aZsqLtYHdaItYzqlKfkwGE2xUInWQ76DAZ7SGf4i73
FA9Qu2W/w2wz2Q6a/50U35+W4okpbzpFHbsTJameIY93lqcr0eO10sYjGKZMTOMWuWcVeNIWkZbmfwei
YKsFdkb5YOsVTWv8+AwWdvgAHO9dk8XhpVignpkk3UvBp+HBTdIthSb4LwAA//8BxWw2xQ0AAA==
`,
	},

	"/generator/template/interface.gots": {
		local:   "generator/template/interface.gots",
		size:    130,
		modtime: 1530606345,
		compressed: `
H4sIAAAAAAAC/6quVihKzEtPVdBzSSxJDKksSC1WqK3lSq0oyC8qUcjMK0ktSktMTlWortbzS8xNra1V
qOZSUFBQQOhzy0zNSQFrUoBIQBVagdSATYXJVVcrpOalgHi1XAg2IAAA//+lF0FoggAAAA==
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    0,
		modtime: 1530604495,
		compressed: `
H4sIAAAAAAAC/wEAAP//AAAAAAAAAAA=
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    392,
		modtime: 1530611826,
		compressed: `
H4sIAAAAAAAC/4SPTU7EMAyF9znFWw4LcgBGrEAs0Sy4gElNiUhDlKRIyPLdkSmFUoTGKz/5532vUHih
kSHiT0urenSuzI8pBoRErdnsxpp7mlgV4gBA5BKV8sjwd5HT0KD6OSg1vlFnPMVMyW5vqdPDe2HVK4jA
25t1WQScB1PL7WL72/Bg8jX3Ood+okqT6sU5CKv+HJvfGOIaW3ncAZj6wvg/2zffTyiM3DdvDyubVeU+
14w/rvvw6j4CAAD//3OIOEmIAQAA
`,
	},

	"/generator/template/vue.gots": {
		local:   "generator/template/vue.gots",
		size:    1199,
		modtime: 1530167803,
		compressed: `
H4sIAAAAAAAC/6xTT2+cTgy98yks9JMC0gZyjMgvUdX866FqojTJpephCl4WFcZTjyd/ROe7Vwy7FFaN
eumext5nv+dn03SGWKCHc+oMadSygkeH4GHN1MHBk8NDw2SQ5fWwwpJYCfHBSbQtfHR4h5Yclzir4G3q
N66Hvs/u8IdDK97DagytIW3R+4kuy/s+u1Ci7l8NXjUtej/vUaNGVoK3ZOWB29WUuMYhnrX5gK1BPoii
R4eZs5jMhKYnUfRumjfCl9C9wrVyrUDZKmsHeefD45PqBn34IqgrG6zpIwCAPIeStBV2pRCH1CxO0i1s
+FlnkJM0xD7aVb9XFuGB2xAbbp6UIHxTFh+4LcAKN7qGU4g3IqbI85ZK1W7ISnF8dHwUT22uL+8hvPs+
u3K6lIb0KDoxilVXLIxPC7hl6hqLH5vv+P9iCV++wk+4ZCY+gz6a1Oc53N9c3BRQoSB3jUZwFqFGyQ1Z
AVWWxNUgVgh4JJoXN+uAH7BTOjgVUsth9/abyKax2daTFcTLpcRjZjl0nJ78gbzGfe4a36AeL2mPOTg5
nM0/MYVRHGsIFP8N681qlGRUlGayQZ1M2BE/rghOz2ZXNZ+HWsxaqpMdcmbCHukOkVVKFCi7/A6XZX61
CHE4jb9rCLC3BWh8Ho8siT9Th7IZTHpm0nW8V+SnaPuHj/yvAAAA//8kA0wHrwQAAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},
}
