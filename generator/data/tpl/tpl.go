// Code generated by "esc -o generator/data/tpl/tpl.go -modtime 0 -pkg=tpl generator/template"; DO NOT EDIT.

package tpl

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/generator/template/echo_enum.gogo": {
		local:   "generator/template/echo_enum.gogo",
		size:    410,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3yQMWvDMBCFZ9+veIQOFjTOnpKpaaFLUmjoEjKo9tWYxmcjy0MQ99+L5MSQod0ep/fp
Pm61wnNXMWoWdtZzha8Letf5zvbNE7Z77PYHvGzfDgVRb8sfWzNCKN6nqErkL30a7WzLqmjEE5WdDB45
AUAISzgrNaN4bfhcDVC9PtyYEB5ucRPHn/Y88txagqVSJUP0PUqJvIzGM23w4V0jdW4wpIBAmdiWB6w3
aG1/nKunqRDSx/+63fmtsZjz4vEOnswyJcoc+9EJ0uZjVDyR/mUcb56beKsoeyXzRrxJVUNKvwEAAP//
zr/nV5oBAAA=
`,
	},

	"/generator/template/echo_service.gogo": {
		local:   "generator/template/echo_service.gogo",
		size:    2836,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xWUVPbRhB+tn7FRk3TO4Nl4TZDgfHQFOyUzgCZ4OlDOQKytLavke88pxM1lS+/vbOS
7JoAnSZ4+nJz2t37vm/XuwvtNhzpBGGMCk1kMYHhHcyMtjqayQM4Poez8wH0jk8GgefNovhjNEYoiuBd
dXXO8+R0po0F5jV8g2Ocz3zPa/hjaSf5MIj1tJ1Gw8xG8cc2xhPte9zzYq2y8kVvGskUMmukGkMX/A+M
MXYZtf560/r9aiFEsrh88Y0QL7999Z0QTSG2hGgJ0e4KcSjEh+ubQoiF+3S1uBRiXoThm9C16Ha82+87
uvT3wtrUPz6qTcf9panf67srvsWECP53Ut7kC8aEmHc6nJKmW7gQYh7u8SZ9hQkdEeeH93xb/JAxYg53
CC/8kY4hHTEdSMadkRDz3RHlMu/slDo735Pj9bBS/Tqhr118Xg4LJsS6lL37UiqO0fM4OOfNL6xOVVPO
f3rQSs/KdXNY95FaCyGCxfXi07Mwm5uTx7kQAd9aS3hThdtk0TZYsGcX6/BludVuI0M7zcyrrdaFah0G
p3lmj/R0JlNkpYtTdLtNe/QsmqJzIDOwEwSpLJpRFCPEWtlIqgyiNC1dZDA6TdFknr2b4frj1avCaxRF
C0ykxgjBKdqJTjJwzgMAejCQNkXnWLMoghM1y+3gbobOcSgt57ldmYpCjkAhBD1jtCEb+L5z20CBKxvF
oUqc4zVDC1AlROi8SuV7zGZaZXhCGlVU7vo8tqR06fpHf+Hg5o9Mq33f1D7/xmuUbAT/SBySz78huscT
H+UqhutVra5/iVSSomGZuYWieFmbOdCfpqB29ulN4TUM2twoIAgWVxFHWlmcWw4MjYGSnVNoQyrY74LC
P9lnpfXIOaJQ6EIc/CxVwqTiB6XlRReUTEuABqVMGJ9XrCjz34cjPZ1qVX4UhFKbX63uxSlmWTTGfYKu
fiPGnXMVeJlKHPx6cX7GfuiE20B83Gs0XK3wNkp7xpACqYLfolQmkUXGD5aOr9W6hKpdFdp/U6Vz+2gf
AjViWfy6/UhLZm6DtRaXimCoKR4HWP0s+stSK188pj68p76iLsVRJk+iLg37oHNbh67DdtZgaarWRow2
yHscy8yiubdJ8gwTsBqGUiVgdG5pZ5SD8CCcITTLxu7FE70N1VSshqJYTfVTG2VV3Qs0tzLGqr7vzi8G
/jIIg7e9AfPL/xntxDl/+4l55A+WyL+SvO2tcxDl15E8XFx/BwAA//9aHSIDFAsAAA==
`,
	},

	"/generator/template/echo_struct.gogo": {
		local:   "generator/template/echo_struct.gogo",
		size:    797,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/7xSz2vbMBg9W3/Fmw8hLq2ys0cGpXbAkKZblvUyRqrFXzJtjux+VmBB6H8fUpOSBMZu
vZin90nvh6XRCHdtTdiQIVaWavzYo+PWtqrTH1A8YPawQFlUCylEp1a/1YbgnPz0Ar0XYjQKxF2j+n6m
toGy+44uOPSWdysLJwDAuRuwMhuCnGhq6h7eHwZyoW0TDgS47wJ6+tW3Jk+dky9a6dOrCJk6HPVCrHdm
hSFf2GZ4VI2ulaVhhqsjLplbPkQh5h75GN++X8Uoceb8/2LeQK9Bz5BHzTk97zRTjZQPKA27E70Gy5Na
4zHS9OAd/YP5pCqnxXJefv5azctCJElMNYbqOjL1MKyuMTjJF+HSqC3lZ/LXiPNluIEcA/KZSPzl3/pH
g0nLW2WR0lbp5jX8O/5TBkLeK7v6+cWyNpvhqWV2WaaaPd5Oq2JZ3t9W07fqcrLUazRkolGGj3gPJ5KE
ye7YYHD2BFz89nl8BD6oH/cZ3Qgv/gYAAP//EHwqaB0DAAA=
`,
	},

	"/generator/template/php.gophp": {
		local:   "generator/template/php.gophp",
		size:    2425,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xVTW/jNhC961cMBAOWAlvrbQ9dxI2LNEm3OSQput6TEwi0NLG5kEmFHCbrCPrvBfVl
SZa3RXkwTHjmzeObmedff0u3qfPh7MyBM1huuQaugcEzTxA2KFAxwhjWe0iVJMlSDt4rKs2lCIx5N0Ek
dx/qn3yL8blJYnQOWQbBku8Q8tz+eP0A9w9LuLm+XQYOnH1wHMF2qFMWIWRZcM92+MVe8nzuOEYj3HyP
MCUuxby4fjbv7wn+SZQ+XiUcBQHTYK/lbe5kmWJigxDcodZsgzrPnShhWkOWEacEoSiS507mAABk2RSq
jD84JrEuiAJAqvgrI4RRRcsyKhNQxHWMWSc8gmcjIksRXlnCY0boMaXYHkYKdSqFRr/MLD5/WNQe/gwe
1xrJa/JXbkPCffL9FlKJZnO4flh/w4gguGbElvvUSj6iLdfTRZMNFyDwrS/FqULzLANMNA7iDOcUKY0+
9uQFRI8ybZV8K6g0/fXccYMztjMoJAF+55pcf35A62h4qJRXvRluZa9NGilsanlZNqhenvdUqjt/GIh+
W4dU6k1P7gwy2nQY9XEVklHiCH7eefnpqSQZFvN4Cnf13+ayDDihVWsG4GJxRHW6OJCY9BDLCfsXgEn7
gcftt+ep1iN36uB68bsrb90KI2tQo23LOQa1C8NICk3KROSN1kzjV8XhAsYff/olmAWz4OP5p9mn2fjE
JBzgq8U7OJXXUWHVudkztsVCo/i4kKMqPTmOI75DaagI+3nWDXhqbn53/Cpva54ZsSS5TLk1gpcJjHZI
WxlPYGQUn8BIGkoNWQ2P3hkzYnDR4z/+pqUoeSt8Ge7902GnGyex+9IXbrpQ+GJQk9dnZUv7bRT2diUF
lWI3mNPFBul3Ge89v/hahWjPrzpe5EZNoqUexhjJGL0W5ARIGWyVa7l0lbxyUSmpBgx6yO2OslburvzH
ssY74HdDBetHDtS0ApiknrtWC70Weitwumj+vAbxu0m1I5W58/9h9ldMWIN/5iKGpv9rGe/PwYWg3c0j
NXpef1eMhT5hfm2fD25Faqg0rGI0f2y03aWwBmXX947iPHfL+9e/b4vvYXh/eXfz5a/Lq5swhADcx8cs
Cx4KzSt/bBaw8qbc+ScAAP//SLLRKXkJAAA=
`,
	},

	"/generator/template/spring_service.gojava": {
		local:   "generator/template/spring_service.gojava",
		size:    856,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/6yRTY7iMBCF9zlFKauwGHOAbBADQiwgaMgFKkkRLKDssSuNUOS7t8JfsuhuqRFZRX5+
z++rGo/hr6kIamJyKFRBcQHrjBi0OoVZBussh/lsmasoslgesCZoW7W5/YaQRpE+WeMEjKuVt05zvXN4
orNxB3WmQhWaK4XMRlC0YbUgWaG1muv0t9aN8S97/5G3hj1NTXV5wfy/IS83b2Sb4qhLwMKLw1KgPKL3
3VTWeKIQpugJ2ggAoG3/gEOuCdSKZG8qDyE8Fb0DJlBbch+6pPxiCeLFPI8fdyYD3iS+Tl32IcSjmzok
up7ce7WtyhqxjXSJIfTFurhkMmDppCX3NzWP7sW7z5E0jnt7onmUXtUegbjq2v6ItMm2A6Z+/e9AWpAk
b4V4LvXbJ794L71HPZJC9BkAAP//3o5aN1gDAAA=
`,
	},

	"/generator/template/spring_struct.gojava": {
		local:   "generator/template/spring_struct.gojava",
		size:    585,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5SPwWoCMRCG73mKOdqD8QGWQkFbqBT1sC8w7o7baDYJk1mphLx7ibqtUmhpTjOB+f7v
n81g7luCjhwxCrWwPUFgLx6DqWCxhtW6hufFa62VCtgcsCNISW8uY86VUqYPngUa3+sdRiH+6K3eY3OI
3ml0zguK8U4vo3dzJhTP1b+ONuwDsZy+s/Z4RD2IsfrNRKmUCsPWmgYaizEWv3kZVthTzpAUAEBKU2B0
HYF+MWTbmPP5P7A5ohDsjENbTpd4xPoUzpcJdIFA6TlCyLWQszrvTzedLrSLx73BpKzeCQ+NbJCxz/nh
D6vy5N1EfaMAj78KlfWqldIdE6Zj1y+7m5IdScHWRmzhTka18phkYPczNl9jxuysPgMAAP//ioLHmkkC
AAA=
`,
	},

	"/generator/template/ts/data.gots": {
		local:   "generator/template/ts/data.gots",
		size:    584,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5yOQWsaQRSA7/MrHl6Epeq90IPFLRSkSJFeSinj7lMH1tntzGypDAOFGBIhBiGag4fk
FBAE9RRIzM9xd/0ZYdVFc8jFOc3wvvneV7IsYkG9zSQ0mYfAJLSQo6AKXWh0IR8IX/k0YPk3mONzRRmX
QD0PVBvBpYqCVCJ0VCgQGsh4C0KJLjC+BQ5WJUGi+MsclMSCwimHWLBZPMS3F+vVYzK6jy+H6+frrJRY
sJtEV+fRcFaufY36g2S22CzPktE07v+PXsbJaJpMevF4GQ/myeomvutF88n6qU+sEtG6AILyFkLR5mFH
gjEE/wW+UIA87IDWxW+0g8aAJgAAWmf4F4aeu+VhN8jAT+n9B/VCNOZD9gm5m6Jmu3D/OF5eoYrWuwEe
BzCuUDSpgydUfEwZJVPlQW6M1qwJ+AeKVdpAD3LV8me7+vu7XbPLdbuSM+bnL62Ru3vfO+GvAQAA//9s
n4weSAIAAA==
`,
	},

	"/generator/template/ts/helper.gots": {
		local:   "generator/template/ts/helper.gots",
		size:    4003,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5RWe0/byBb/P5/i3OhebEPqcHtbqXLqUqC05YqSboD9YxFaDfFJ4mYy4x2PQ7OQ776a
h+1x4uwCUqvMefzO+xyni4wLCY9wJgQXPTjliwVn9vEFGYp0bF/HhZzZn78SmiZEon2epCzRP2ENE8EX
4IX9hEjidfr7+x3Yh084SRkm8FXKDE55gjDhAgTmGWc5woywhKZs2oH9fgd/ao+QFQuYSZlp8ccOAMCn
s8/HNxfXEMNhTxMuh6NvxxcQw+tDSzk5/+33s9FoOIIY3pTE0+G3b8PLmv7a0s8vr89Gl8cXFeet0liX
Xqt/HzMiyAIeS1/XtddyhoA66orkBjAp2FimnBmZrzZEv5QNIvgu+CLN8T3DJYoPNsb8IZXjGVRyYS6J
LPLAstXfmKic2dSEVcRRJaD+BMpCsNJGKPAHjmWNqsoDJDdlD3ZAu3lrolOU1sKZEBDDgmRO51yvMmya
CgbPcs4C7vKnWa8Xx1vDJjghBZXPQWD4YJLkd2/YnPEHZp7dwMCt2/vFycYaxuXD6Rl+r+B1w1Sd0pLF
SjVyRzOIwM+lSNkUnhpTCk/1mMJTc07hqR7Usp3UGPqqmHNcQcpqT91+SydQ+xHOSD58YN8Fz1DIlT/H
VQB7e7Xm7RxXd66629VausmqyuxNnUC8aEvIqVHTmOpjNwk74EmZmJdiVxnt7EBeuml+KXqjRrss3JeF
eyl6VfEttdYZ2MCzLW87viG5rl1dd+r/2xXXHTsjzogsCQUCpos12ajmQBggG/MEE8sFOSMSxoTBPQLJ
MmQJSA4kS6EQtH3nagB/SWhkQYLyh20/66gRvBmdn/JFxhkyqZSCsFNnIqNkjH7/P28O+9O0B95Hr5X9
v2PDjtrZr9/0pz3w/r2De2qUezvYh1r5oJ379sQo3+5gfzLsOy8Y1JWAkyKlCRC4GV3A/crmVeVHlydX
GdbbiiVO0QpBIdL0e9WX6qlWiCLkKJbpGB1hC2TkBf5RYC7t3gsBw2modb8ipXxkuQ+8oIkqs1IxosAn
IFcZNgTdhomg6hyYFJTCjaBlrV9pE1/OrlWIc1z1l4QWCBlJRa4x8CdZZBQj9VAhKd0YuurkRP0+5WNC
ZzyX0bvDd4ddJUTEFGJ4ZGSBEXQfkE0fMO32gKXjuSHIlLDuWsmWfsUfoBXwSKHEFciewogriNbG1juS
SPylQLG6EfT99Qe/EFWX92zSI7jebHi1xf9luO4KtnNQCDroOHOtbkJGhMwhhtu7QafTei624RRzSeig
cTyGpuaZ4JKrUrbdkM2zoNZDbA3obTbotKweha4l4xiYqv3Tk24WPoGS7BUsMZ+f3qYNE3srsA6yp0Dy
mt/vK4NpDkQIstp0IpT8SifcD4zhW9vAx0r6bsv6HGKdxwPwbu88xwtAmmO78GaKdHmWhLZnRwmEEy7O
yHjmL1UbNkGreNT9aXB0SDsD+pxS3I5HW4QYlN751bBUHWwJVWbLbyD3rJjglf2yjsa2kd1p9P9Xw8vQ
9Hs6WfnLDbPrxks3dpgV+cy3h2IeqDLEHhxUpyOoPxfXwcA5cao1chQpoemfmHw3Sy62oD94ynxvT63a
auo2hd0Y1AY9iEHNcJiyBH8OJ7535JmEv/ovHIF35EEEChIOtuwOtk+vOolt91ZZeubitpRLskBXAtS6
csTKpVTJVVuqErTr9dnb1bUcQ1ev/CtD0/yGyRi6V2SlZbrPWbd9Fy4sVf92zbZtWMfHmug69g+fHLrk
0O13TT2reA+gGyqaC6UO9l8BAAD//8Noe4ejDwAA
`,
	},

	"/generator/template/ts/ts_service.gots": {
		local:   "generator/template/ts/ts_service.gots",
		size:    2271,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/9xTXW/cRBe+9684WlXaD23t5pXeqmwIUgQFcgGN1PADJvbZ3SneGXdmnDYyI7WUtFRK
m0iNKiCBFkFRRT8WJChJ2tA/Y+9urvoX0Hjs3Q2iH+KSufLMec45z3nOY6/RcBqw1KUS2jREoBI6yFAQ
hQEsr0I1ElxxEtFqDkOL8jlThDIJbcGZQhbA/OIC+DxAUF2i4AIXn8IFqrqgugghXRZErEKVXKRcVpvm
UWCbC2wCVVUJAs/HVGBgkwuYoUKZVCQMMQDK8lKR4OfQVwWXCdO8NZVwQVClkBn40mqEZ31BoxKdYyLB
V2iAEggsE0l9iCXpILS5sCOQMATCAuiRVWCIAZDgXCxVD5kC4vtcBJR1QHGQEfq0Tf2SUjmERbIAJFUx
UZQzpwHH3/w4DRj17w1uX0ufPhlu3Rl8uZnu3yyX4DTARrL1tWzzQXb9xvBBf/TLleHW/fnFheE3X6RP
fxjevfzi2Xq29yQ9eD7cuj98+DDdvT64vZft38qFffFsHbLtu4NHPx7uXBr9dDl9/u2ofzkPZY++ynbu
p/s3D7/fG24/TncfTRpeXbO1bdUj4o769yzTArrx82BjM/1z29KbX1ywDLM7+4OdhxOGj787/HptcGUt
u/p7ttEfXTmwfAZ39wY3Hmdrf6QHtywP+21Cv36e7t7INtdHl9bTg53s2v5g+7fB1p7T8Bzai7hQkM/R
hATmzcei4D0qEbQxaq901mwJThwAgCQRhHUQjqnVCJtwbJnzEFpzUOugWsiB7xFFzMQS3Pdj5pulyrrW
RfZxmwlaN6F4QhZo7ZRdXS8giky1HRv3ExE2AYXg4kPCgtBYa5LUxTBCUZ11HK+xTKQBQ7bRtyM3PMfn
TCooI3NQ6SoVtTxv5q3/uTMnT7kzM/93T55onTpx6kRl1vE8iCVafRwnZ+2HRMqPSQ/NtO6749txrS3C
6jKZWWub2EPV5YHJqkRcqkqeYSK0DXg+F+4sihXq40cqAPdMZBWDygenlybg6TIdHFex2uWAXBkTz0ue
NjezhqmKWjt4MRe1XZCEJHHNFFrXIiJIT7bMywKLYmVyta63oLDF20ninonVOAKfAcMVFO8UxghRQSzC
FkglzGrmpvdWK4RvQiVJJlJqXclfCg6V+qyT1xKoYsGs/G6SFLNrXYtNiSShbWA4lsTqobWdIEkwlKh1
AvYOulCpnpc2x1VdZDWBEuZK9uXxPOgacyHI2PdRSjBuPAIpyBWyuAIlD1fQlHMNFoiEv0k16azrrk+U
362hEK9qbncpUEacSfyn9kf+A1POLdHT3WadiUmcJPEapbPbqPzuK23737BTIWuAbRKHChbPnF2adlgu
Qy2B3FfWTi2omt+02sw33xq7qP4S17zGMf/WLS93ymtd8oYOOeqOhqf1XwEAAP//PUOqht8IAAA=
`,
	},

	"/generator/template/ts/ts_service.govue": {
		local:   "generator/template/ts/ts_service.govue",
		size:    2033,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/4xUbW8bRRD+fr9iZFXyi+xzxKfKpRWlFIgENKIv3zd3Y3vb8+51dy+tdZzUENJSKWki
NaqABBoERRHNC0hQkrShf+bOdj71L6C99Z3PIBD36Wb3mZlnnpnZZq1m1eBal0poUw+BSuggQ0EUujDf
h7IvuOLEp+UUhgblcKYIZRLagjOFzIWLc7PgcBdBdYmCO1zcgjtUdUF1ETw6L4joQ/lGgJ+i5IFwsFzX
VwLbXGAdqCpLEHg7oAJdE2IKrGlRJhXxPHSBsjSsL/hNdNSY14R1SoNKuCOoUsg0/Frfx6uOoH6GTjG+
4AvURQkE5omkDgSSdBDaXJhyiOcBYS70SB8YogvEvRlI1UOmgDgOFy5lHVAcpI8ObVMno5SVYpDMBUlV
QBTlzKpB4/9/Vg1GB88GTx7EL18MN54OvlyPjx9lDbFqYG6SleVk/XnycHX4/GD0y9JwY+fi3Ozwmy/i
lz8MtxffvFpJjl7EJ6+HGzvD3d348OHgyVFy/Lgg75tXK5Bsbg/2fjzdujf6aTF+/e3oYLEASPa+SrZ2
4uNHp98fDTf348O9SfL7yyaPyTAl9OjgmWE9hq79PFhbj//cNFQvzs0atsnT48HW7oTt/nenXy8PlpaT
+78nawejpRPDarB9NFjdT5b/iE8eGx7mX1/9+nl8uJqsr4zurcQnW8mD48Hmb4ONI6vWtGjP50JBCJd4
z+cMmarDjQAh0rPbg/JCgA1fcB+F6jdcdLggiovyucyxIEPBQ2STmeNCCwAgDAVhHYQzqu9jHc7Mc+5B
6zxUOqhmU+B7RBGtkgT7/YA5eihkNYrG3g3jCVFUh/ERMjeKrIyu3XSJIoW0+eBfF14dUAguPiTM9fRo
Tpy66Pmoq7JuBGgHEiuFuqrnLOudXB4L76aRXWyTwFPgeERKCEP7kv75hPQwigDv6q2XqZKm8mZTvwpS
icBRXKRHBbtSHcP0JwMfRaWa2pGVeb9LJMJ14aW2L+gCUaj3UhfWAqmErug8lLpK+a1m0+MO8bpcqtbZ
mbMzpYl+TkZT6z4hDY2CyKZJkwYU9e+h6nJXO5d8LlVpypG2AW+n3byKYoE6+LFywb7imzZC6YPL16Yd
iuE6OBXNNDYHpq3TuDT8ZW3pOSlEz9G26ULFJ4L0ZEufzDI/UBofRdUWzAneoxI/orfw7TC0rwQqv4XP
II19AUIr74iHCoIpmQtTVVFdKu1xJ+qlMJxIHEWlOpRyQiU9SVlMgSoQ+qWm0j6jm2aH4ViNKKoEeloz
SRnmOhmRosiUFoboSYyi0JjRWLSqrbrIKnkqk07C+QuFKcu+ZhO6eiEQZOA4KCXoDYIGvDUz8w/wmPRY
P1uvubeAFYHSTr1IuglFPatTMaL6lIlCpKTgP1iZvguUPmcS/43R1GJXUAg78/gbgdyqnrMmB/kzYv0V
AAD//yf6ngLxBwAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/generator": {
		isDir: true,
		local: "generator",
	},

	"/generator/template": {
		isDir: true,
		local: "generator/template",
	},

	"/generator/template/ts": {
		isDir: true,
		local: "generator/template/ts",
	},
}
