// Code generated by protoapi; DO NOT EDIT.

package {{.Package}}

import (
	"regexp"

	"github.com/labstack/echo"
	"github.com/yoozoo/protoapi/protoapigo"
)

const (
	Email string = "^(((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|\\.|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.)+(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.?$"
)

var (
	rxEmail = regexp.MustCompile(Email)
)

// {{.Name}} is the interface contains all the controllers
type {{.Name}} interface {
	{{- range .Methods }}
	{{.Title}}(echo.Context, *{{.InputType}}) (*{{.OutputType}}{{if ne .ErrorType ""}}, *{{.ErrorType}}{{end}})
	{{- end }}
}

{{- range .Methods }}
func _{{.Name}}_Handler(srv {{$.Name}}) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new({{.InputType}})

		if err = c.Bind(in); err != nil {
			resp := CommonError{BindError: &BindError{Message: err.Error()}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := CommonError{ValidateError: valErr}
			return c.JSON(420, resp)
		}

		out{{if ne .ErrorType "" }}, error{{end}} := srv.{{.Title}}(c, in)
		{{- if ne .ErrorType "" }}
		if error != nil {
			return c.JSON(400, error)
		}
		{{- end}}

		return c.JSON(200, out)
	}
}
{{- end }}

// Register{{.Name}} is used to bind routers
func Register{{.Name}}(e *echo.Echo, srv {{.Name}}) {
	// switch to strict JSONAPIBinder, if using echo's DefaultBinder
	if _, ok := e.Binder.(*echo.DefaultBinder); ok {
		e.Binder = new(protoapigo.JSONAPIBinder)
	}

	{{- range .Methods }}
	{{- if ne .ServiceType "POST" }}
	e.GET("{{.Path}}", _{{.Name}}_Handler(srv))
	{{- end }}

	{{- if ne .ServiceType "GET" }}
	e.POST("{{.Path}}", _{{.Name}}_Handler(srv))
	{{- end }}
	{{- end }}
}

