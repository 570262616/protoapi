// Code generated by protoapi; DO NOT EDIT.

package {{.Package}}

import (
	"github.com/labstack/echo"
	"gopkg.in/go-playground/validator.v9"
)

// {{.Name}} is the interface contains all the controllers
type {{.Name}} interface {
	{{- range .Methods }}
    {{.Title}}(*{{.InputType}}) (*{{.OutputType}}{{if ne .ErrorType ""}}, *{{.ErrorType}}{{end}})
    {{- end }}
}

type ResponseInternal struct {
	Response interface{} `json:"response"`
	Error    interface{} `json:"error"`
}

{{- range .Methods }}
func _{{.Name}}_Handler(srv {{$.Name}}) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new({{.InputType}})

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{Bind_error: &BindError{Message: err.Error()}}}
			return c.JSON(COMMON_ERROR.Code(), resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{Validate_error: valErr}}
			return c.JSON(COMMON_ERROR.Code(), resp)
		}

		out{{if ne .ErrorType "" }}, error{{end}} := srv.{{.Title}}(in)
		{{- if ne .ErrorType "" }}
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(BUSINESS_ERROR.Code(), resp)
		}
		{{- end}}

		resp := ResponseInternal{Response: out}

		return c.JSON(NORMAL.Code(), resp)
	}
}
{{- end }}

type CustomValidator struct {
	validator *validator.Validate
}

func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validator.Struct(i)
}

// Register{{.Name}} is used to bind routers
func Register{{.Name}}(e *echo.Echo, srv {{.Name}}) {
	e.Validator = &CustomValidator{validator: validator.New()}
    {{- range .Methods }}
    {{- if ne .ServiceType "POST" }}
    e.GET("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}

    {{- if ne .ServiceType "GET" }}
    e.POST("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}
    {{- end }}
}

