// Code generated by protoapi; DO NOT EDIT.

package {{.Package}}

import (
	"net/http"

	"github.com/labstack/echo"
)

// {{.Name}} is the interface contains all the controllers
type {{.Name}} interface {
	{{- range .Methods }}
    {{.Title}}(*{{.InputType}}) (*{{.OutputType}}{{if ne .ErrorType ""}}, *{{.ErrorType}}{{end}})
    {{- end }}
}

type ErrorInternal struct {
	Code    int32       `json:"code"`
	Message string      `json:"message"`
	Details interface{} `json:"details"`
}

type ResponseInternal struct {
	Response interface{}    `json:"response"`
	Error    *ErrorInternal `json:"error"`
}

{{- range .Methods }}

func _{{.Name}}_Handler(srv {{$.Name}}) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new({{.InputType}})

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal {
				Error: &ErrorInternal{Code: 1000, Message: err.Error()},
			}
			return c.JSON(http.StatusBadRequest, resp)
		}

		out{{if ne .ErrorType ""}}, error{{end}} := srv.{{.Title}}(in)

		resp := ResponseInternal{
			Response: out,
			{{- if ne .ErrorType "" }}
			Error:    &ErrorInternal{Details: error},
			{{- end}}
		}

		return c.JSON(http.StatusOK, resp)
	}
}
{{- end }}

// Register{{.Name}} is used to bind routers
func Register{{.Name}}(e *echo.Echo, srv {{.Name}}) {
    {{- range .Methods }}
    {{- if ne .ServiceType "POST" }}
    e.GET("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}

    {{- if ne .ServiceType "GET" }}
    e.POST("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}
    {{- end }}
}

// NewError Creates error response
func NewError(code int32, err error) *ErrorInternal {
	return &ErrorInternal{Code: code, Message: err.Error()};
}
