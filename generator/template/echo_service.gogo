package {{.Package}}

import (
	"net/http"

	"github.com/labstack/echo"
)

// {{.Name}} is the interface contains all the controllers
type {{.Name}} interface {
	{{- range .Methods }}
    {{.Title}}(*{{.InputType}}) (*{{.OutputType}}, *Error)
    {{- end }}
}

type Response struct {
	Output    interface{} `json:"output"`
	ErrorResp *Error      `json:"error"`
}

{{- range .Methods }}

func _{{.Name}}_Handler(srv {{$.Name}}) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new({{.InputType}})

		if err = c.Bind(in); err != nil {
			resp := Response {
				ErrorResp: NewError(1000, err),
			}
			return c.JSON(http.StatusBadRequest, resp)
		}

		out, errorResp := srv.{{.Title}}(in)
		resp := Response {
			Output: out,
			ErrorResp: errorResp,
		}

		return c.JSON(http.StatusOK, resp)
	}
}
{{- end }}

// Register{{.Name}} is used to bind routers
func Register{{.Name}}(e *echo.Echo, srv {{.Name}}) {
    {{- range .Methods }}
    {{- if ne .Option.Value "POST" }}
    e.GET("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}

    {{- if ne .Option.Value "GET" }}
    e.POST("{{.Path}}", _{{.Name}}_Handler(srv))
    {{- end }}
    {{- end }}
}

// NewError Creates error response
func NewError(code int, err error) *Error {
	return &Error{Code: code, Message: err.Error()};
}
