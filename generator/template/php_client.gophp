<?php
// This is a file generated by protoapi (version.uuzu.com/protoapi)
// Generated at: {{ .Time }}
// DO NOT EDIT.

namespace {{.NameSpace}};

use Yoozoo\ProtoApi;
use MyCLabs\Enum\Enum;

/** Messages **/
{{- range .Messages}}
class {{title .Name}}
{{- if isBizErr .Name}} extends ProtoApi\BizErrorException
{{- else if isComErr .Name}} extends ProtoApi\CommonErrorException
{{- end}} implements ProtoApi\Message
{
    {{- range .Fields }}
    protected ${{.Name}};
    {{- end}}

    public function init(array $response)
    {
        {{- range .Fields }}
        if (isset($response["{{.Name}}"])) {
            {{- if eq .Label "LABEL_REPEATED"}}
            $this->{{.Name}} = array();
            foreach ($response["{{.Name}}"] as ${{.Name}}) {
                {{- if isObject .DataType }}
                $tmp = new {{title .DataType}}();
                $tmp->init(${{.Name}});
                $tmp->validate();
                $this->{{.Name}}[] = $tmp;
                {{- else}}
                $this->{{.Name}}[] = ${{.Name}};
                {{- end}}
            }
            {{- else}}
            {{- if isObject .DataType }}
            $this->{{.Name}} = new {{title .DataType}}();
            $this->{{.Name}}->init($response["{{.Name}}"]);
            $this->{{.Name}}->validate();
            {{- else}}
            $this->{{.Name}} = $response["{{.Name}}"];
            {{- end}}
            {{- end}}
        }
        {{- end}}
    }

    public function validate()
    {
        {{- range .Fields }}
        if (!isset($this->{{.Name}})) {
            throw new Protoapi\GeneralException("'{{.Name}}' is not exist");
        }
        {{- end}}
    }
    {{range .Fields }}
    public function set_{{.Name}}({{if isObject .DataType}}{{title .Name}} {{end}}${{.Name}})
    {
        $this->{{.Name}} = ${{.Name}};
    }

    public function get_{{.Name}}()
    {
        return $this->{{.Name}};
    }
    {{end}}
    public function to_array()
    {
        return array(
        {{- range .Fields }}
            {{- if isObject .DataType}}
            "{{.Name}}" => $this->{{.Name}}->to_array(),
            {{- else}}
            "{{.Name}}" => $this->{{.Name}},
            {{- end}}
        {{- end}}
        );
    }
}
{{end}}
/** Enums **/
{{- range .Enums}}
class {{title .Name}} extends Enum
{
    {{- range .Fields }}
    const {{.Name}} = {{.Value}};
    {{- end}}
}
{{end}}
class {{.Name}}
{
    protected $httpClient;

    public function __construct($baseUri = '127.0.0.1:8080')
    {
        $this->httpClient = new ProtoApi\HttpClient(
            array(
                'base_uri' => $baseUri,
                'timeout' => 30,
            )
        );
    }
    {{- $commomerror := .ComErr.Fields}}
    {{range .Methods}}
    public function {{.Name}}({{.InputType}} $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new {{.OutputType}}();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new {{index .Options "error"}}();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                {{range $commomerror -}}
                if (isset($common["{{.Name}}"])) {
                    ${{.Name}} = new {{.DataType}}();
                    ${{.Name}}->init($common["{{.Name}}"]);
                    throw ${{.Name}};
                } else {{end}}{
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "{{.HttpMtd}}", "{{.URI}}", $handler);
    }
{{end}}}
