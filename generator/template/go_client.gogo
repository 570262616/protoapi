// This is a file generated by protoapi (version.uuzu.com/protoapi)
// Generated at: {{ .Time }}
// DO NOT EDIT.

package {{.Package}}

import (
	"bytes"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
)

type {{title .Name}} struct {
    apiURL string
}

func (p *{{title .Name}}) SetApiURL(url string) {
	p.apiURL = url
}

type {{.ComErr.Name}} struct {
	{{- range $f := .ComErr.Fields }}
    {{title .Name}} {{type $f}} `json:"{{.Name}}"`
    {{- end}}
}

func (e *{{.ComErr.Name}}) Error() string {
	return "common error"
}

{{- range .Messages }}
type {{title .Name}} struct {
    {{- range $f := .Fields }}
    {{title .Name}} {{type $f}} `json:"{{.Name}}"`
    {{- end}}
}
{{- if or (isBizErr .Name) (isComErr .Name)}}
func (e *{{title .Name}}) Error() string {
	return "biz error"
}
{{- end}}
{{- end}}
{{- range .Enums}}
{{- $eName := .Name}}
type {{$eName}} int

const (
	{{- range .Fields }}
	{{.Name}} {{$eName}} = {{.Value}}
	{{- end}}
)

func (code {{.Name}}) String() string {
	names := map[{{.Name}}]string{
		{{- range .Fields }}
		{{.Name}}: "{{.Name}}",
		{{- end}}
	}

	return names[code]
}

func (code {{.Name}}) Code() int {
	return (int)(code)
}
{{- range .Fields }}
func (code {{$eName}}) Is{{.Name}}() bool {
    return code == {{.Name}}
}
{{- end }}
{{- end }}
{{range .Methods}}
func (p *{{$.Name}}) {{title .Name}}(reqData *{{.InputType}}) (resData *{{.OutputType}}, err error) {
	jsonStr, err := json.Marshal(reqData)
	if err != nil {
		return nil, err
	}

	url := p.apiURL + "{{.URI}}"
	res, err := http.Post(url, "application/json", bytes.NewBuffer(jsonStr))
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	jsonByte, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, err
	}
	switch res.StatusCode {
	case 200:
		resData := &{{.OutputType}}{}
		err = json.Unmarshal(jsonByte, resData)
		if err != nil {
			return nil, err
		}
		return resData, nil
    case 400:
		bizErr := &{{index .Options "error"}}{}
		err = json.Unmarshal(jsonByte, bizErr)
		if err != nil {
			return nil, err
		}
		return nil, bizErr
    case 420:
		comErr := &{{$.ComErr.Name}}{}
		err = json.Unmarshal(jsonByte, comErr)
		if err != nil {
			return nil, err
		}
		return nil, comErr
    case 500:
		return nil, errors.New("internal server error : " + string(jsonByte))
	default:
		return nil, errors.New("unknown status code")
	}
}
{{- end}}
