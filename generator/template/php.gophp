<?php
/**
 * This is a file generated by protoapi (version.uuzu.com/protoapi)
 * Generated at: {{ .Time }}
 * DO NOT EDIT.
 */

namespace {{.NameSpace}};

use Exception;
use GuzzleHttp\Client as HttpClient;
{{range .Messages}}
class {{title .Name}}
{
    {{- range .Fields }}
    private ${{.Name}};
    {{end}}
    public function validate(array $response)
    {
        {{- range .Fields }}
        if (isset($response["{{.Name}}"])) {
            {{ if isObject .DataType }}$this->{{.Name}} = new {{title .Name}}($response["{{.Name}}"]);{{ else}}$this->{{.Name}} = $response["{{.Name}}"];{{ end}}
        } else {
            throw new Exception("'{{.Name}}' is not exist");
        }
        {{- end}}
    }
    {{range .Fields }}
    public function set_{{.Name}}({{if isObject .DataType}}{{title .Name}} {{end}}${{.Name}})
    {
        $this->{{.Name}} = ${{.Name}};
    }

    public function get_{{.Name}}()
    {
        return $this->{{.Name}};
    }
    {{end}}
    public function to_array()
    {
        return [
        {{- range .Fields }}
            {{if isObject .DataType}}"{{.Name}}" => $this->{{.Name}}->to_array(),
            {{else}}"{{.Name}}" => $this->{{.Name}},{{end}}
        {{- end}}
        ];
    }
}
{{end}}
class {{.Name}}
{
    protected $httpClient;

    public function __construct($baseUri = '127.0.0.1:8080')
    {
        $this->httpClient = new HttpClient(
            [
                'base_uri' => $baseUri,
                'timeout' => 30,
            ]
        );
    }

    private function callApi($req, $method, $uri, $outputName)
    {
        $data = [
            'json' => $req->to_array(),
        ];
        $response = $this->httpClient->request($method, $uri, $data);
        $rawContent = $response->getBody()->getContents();

        $content = json_decode($rawContent, true);
        if (isset($content["error"])) {
            throw new Exception($content["error"]["message"]);
        }
        if (isset($content["response"])) {
            $result = new $outputName();
            $result->validate($content["response"]);
            return $result;
        } else {
            throw new Exception("Cannot find response body: " . $rawContent);
        }
    }
    {{range .Methods}}
    public function {{.Name}}({{.InputType}} $req)
    {
        return $this->callApi($req, "{{.HttpMtd}}", "{{.URI}}", __NAMESPACE__ . "\\{{.OutputType}}");
    }
{{end}}}
