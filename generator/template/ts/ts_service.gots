/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'axios', therefore, it's required that 'axios' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库axios， 因此需要保证axios存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import axios, { AxiosPromise } from 'axios';
import {
    {{range $type, $bool := (getImportDataTypes .Functions)}}
    {{- $type }}, 
    {{end}}
} from './data';
import { generateUrl } from './helper';

/*baseUrl 可更改*/
const baseUrl = "http://192.168.115.60:8080";
// use axios

{{- $className := .ClassName -}}
{{/*
{{- range .Functions}}
{{- $method := "post" -}}
{{- if eq (getServiceMtd .Options) "GET" -}}
{{- $method := "get" -}}
{{end}}
{{- $error :=  (getErrorType .Options) }}
export function {{.Name}}(params: {{.InputType}}): Promise<{{.OutputType}} | never> {
    let url: string = generateUrl(baseUrl, "{{$className}}", "{{.Name}}");
    // test
    return axios.{{$method}}(url, {{if ne $method "get" }}params{{else}}{ params }{{end}})
        .then(res => {
            // handle error
            if (res.data.error) {
                if (res.data.error.details) {
                    return Promise.reject(res.data.error.details)
                }
                return Promise.reject(res.data.error as {{$error}})
            }
            // handle success data
            return Promise.resolve(res.data.response as {{.OutputType}})
        });
}
{{end}}
*/}}
// use fetch
{{- range .Functions}}
{{- $error :=  (getErrorType .Options) }}
export function {{.Name}}(params: {{.InputType}}): Promise<{{.OutputType}} | {{$error}} | never> {
    let url: string = generateUrl(baseUrl, "{{$className}}", "{{.Name}}");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as {{$error}})
        }
        // handle success data
        return Promise.resolve(res.data.response as {{.OutputType}})
    });
}
{{end}}