/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'VueResource', therefore, it's required that 'VueResource' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库VueResource， 因此需要保证VueResource存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import { Component, Vue } from 'vue-property-decorator';
import VueResource from 'vue-resource';
import {
    {{range $type, $bool := (getImportDataTypes .Functions)}}
    {{- $type }},
    {{end}}
} from './{{.ClassName}}Objs';
import { generateUrl, errorHandling } from './helper';

Vue.use(VueResource);

@Component
export default class {{.ClassName}} extends Vue {
    // constructor
    constructor() {
        super()
    }

    // Base Url
    private baseUrl: string = "http://localhost:8080"
    {{- $className := .ClassName -}}
    {{- range .Functions}}
    {{- $method := "post" -}}
    {{- if eq (getServiceMtd .Options) "GET" -}}
    {{- $method := "get" -}}
    {{end}}
    {{- $error :=  (getErrorType .Options) }}
    {{.Name}}(params: {{.InputType}}): PromiseLike<{{.OutputType}} | Error> {

        let url: string = generateUrl(this.baseUrl,"{{$className}}", "{{.Name}}");

        return this.$http.{{$method}}(url,  {{- if ne $method "get" }}params{{else}}{params}{{end}}).then(
            res => {
                // handle success data - 200
                return Promise.resolve(res.data as {{.OutputType}})
            },
            err => {
                // handle error response
                return errorHandling(err.response)
            }
        );
    }
    {{end}}
}
