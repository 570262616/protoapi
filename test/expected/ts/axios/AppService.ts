/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'axios', therefore, it's required that 'axios' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库axios， 因此需要保证axios存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import axios, { AxiosPromise } from 'axios';
import {
    EnvListRequest,
    EnvListResponse,
    Error,
    KVHistoryRequest,
    KVHistoryResponse,
    KeyListRequest,
    KeyListResponse,
    KeyValueListRequest,
    KeyValueListResponse,
    KeyValueRequest,
    KeyValueResponse,
    ProductListRequest,
    ProductListResponse,
    RegisterServiceRequest,
    RegisterServiceResponse,
    SearchKeyValueListRequest,
    ServiceListRequest,
    ServiceListResponse,
    ServiceSearchRequest,
    TagListRequest,
    TagListResponse,
    UpdateServiceRequest,
    UpdateServiceResponse,
    UploadProtoFileRequest,
    UploadProtoFileResponse,
    
} from './AppServiceObjs';
import { generateUrl, errorHandling } from './helper';

/*baseUrl 可更改*/
const baseUrl = "http://192.168.115.60:8080";
// use axios
export function getEnv(params: EnvListRequest): Promise<EnvListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getEnv");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as EnvListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function registerService(params: RegisterServiceRequest): Promise<RegisterServiceResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "registerService");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as RegisterServiceResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function updateService(params: UpdateServiceRequest): Promise<UpdateServiceResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "updateService");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as UpdateServiceResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function uploadProtoFile(params: UploadProtoFileRequest): Promise<UploadProtoFileResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "uploadProtoFile");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as UploadProtoFileResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function getTags(params: TagListRequest): Promise<TagListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getTags");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as TagListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function getProducts(params: ProductListRequest): Promise<ProductListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getProducts");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as ProductListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function getServices(params: ServiceListRequest): Promise<ServiceListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getServices");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as ServiceListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function searchServices(params: ServiceSearchRequest): Promise<ServiceListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "searchServices");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as ServiceListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function getKeyList(params: KeyListRequest): Promise<KeyListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getKeyList");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as KeyListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function getKeyValueList(params: KeyValueListRequest): Promise<KeyValueListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getKeyValueList");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as KeyValueListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function searchKeyValueList(params: SearchKeyValueListRequest): Promise<KeyValueListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "searchKeyValueList");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as KeyValueListResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function updateKeyValue(params: KeyValueRequest): Promise<KeyValueResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "updateKeyValue");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as KeyValueResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}

export function fetchKeyHistory(params: KVHistoryRequest): Promise<KVHistoryResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "fetchKeyHistory");

    return axios.post(url, params)
        .then(res => {
            // handle success data
            return Promise.resolve(res.data as KVHistoryResponse)
        }).catch(err => {
            // handle error response
            return errorHandling(err.response)
        });
}
