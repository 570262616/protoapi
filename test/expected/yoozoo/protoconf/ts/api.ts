/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'axios', therefore, it's required that 'axios' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库axios， 因此需要保证axios存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import axios, { AxiosPromise } from 'axios';
import {
    EnvListRequest, 
    EnvListResponse, 
    Error, 
    KVHistoryRequest, 
    KVHistoryResponse, 
    KeyListRequest, 
    KeyListResponse, 
    KeyValueListRequest, 
    KeyValueListResponse, 
    KeyValueRequest, 
    KeyValueResponse, 
    ProductListRequest, 
    ProductListResponse, 
    RegisterServiceRequest, 
    RegisterServiceResponse, 
    SearchKeyValueListRequest, 
    ServiceListRequest, 
    ServiceListResponse, 
    ServiceSearchRequest, 
    TagListRequest, 
    TagListResponse, 
    UpdateServiceRequest, 
    UpdateServiceResponse, 
    UploadProtoFileRequest, 
    UploadProtoFileResponse, 
    
} from './data';
import { generateUrl } from './helper';

/*baseUrl 可更改*/
const baseUrl = "http://192.168.115.60:8080";
// use axios
// use fetch
export function getEnv(params: EnvListRequest): Promise<EnvListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getEnv");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as EnvListResponse)
    });
}

export function registerService(params: RegisterServiceRequest): Promise<RegisterServiceResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "registerService");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as RegisterServiceResponse)
    });
}

export function updateService(params: UpdateServiceRequest): Promise<UpdateServiceResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "updateService");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as UpdateServiceResponse)
    });
}

export function uploadProtoFile(params: UploadProtoFileRequest): Promise<UploadProtoFileResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "uploadProtoFile");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as UploadProtoFileResponse)
    });
}

export function getTags(params: TagListRequest): Promise<TagListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getTags");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as TagListResponse)
    });
}

export function getProducts(params: ProductListRequest): Promise<ProductListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getProducts");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as ProductListResponse)
    });
}

export function getServices(params: ServiceListRequest): Promise<ServiceListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getServices");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as ServiceListResponse)
    });
}

export function searchServices(params: ServiceSearchRequest): Promise<ServiceListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "searchServices");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as ServiceListResponse)
    });
}

export function getKeyList(params: KeyListRequest): Promise<KeyListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getKeyList");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as KeyListResponse)
    });
}

export function getKeyValueList(params: KeyValueListRequest): Promise<KeyValueListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "getKeyValueList");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as KeyValueListResponse)
    });
}

export function searchKeyValueList(params: SearchKeyValueListRequest): Promise<KeyValueListResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "searchKeyValueList");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as KeyValueListResponse)
    });
}

export function updateKeyValue(params: KeyValueRequest): Promise<KeyValueResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "updateKeyValue");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as KeyValueResponse)
    });
}

export function fetchKeyHistory(params: KVHistoryRequest): Promise<KVHistoryResponse | never> {
    let url: string = generateUrl(baseUrl, "AppService", "fetchKeyHistory");
    // default POST
    return fetch({ url, method: 'post', data: params }).then(res => {
        // handle error
        if (res.data.error) {
            if (res.data.error.details) {
                return Promise.reject(res.data.error.details)
            }
            return Promise.reject(res.data.error as Error)
        }
        // handle success data
        return Promise.resolve(res.data.response as KVHistoryResponse)
    });
}
