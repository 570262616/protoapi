/**
* This file is generated by 'protoapi'
* The file contains frontend API code that work with the library 'VueResource', therefore, it's required that 'VueResource' is installed in the project
* The generated code is written in TypeScript
* The code provides a basic usage for API call and may need adjustment according to specific project requirement and situation
* -------------------------------------------
* 该文件生成于protoapi
* 文件包含前端调用API的代码，并使用第三方库VueResource， 因此需要保证VueResource存在于项目中
* 文件内代码使用TypeScript
* 该生成文件只提供前端API调用基本代码，实际情况可能需要根据具体项目具体要求不同而作出更改
*/
import { Component, Vue } from 'vue-property-decorator';
import VueResource from 'vue-resource';
import {
    EnvListRequest, 
    EnvListResponse, 
    Error, 
    KVHistoryRequest, 
    KVHistoryResponse, 
    KeyListRequest, 
    KeyListResponse, 
    KeyValueListRequest, 
    KeyValueListResponse, 
    KeyValueRequest, 
    KeyValueResponse, 
    ProductListRequest, 
    ProductListResponse, 
    RegisterServiceRequest, 
    RegisterServiceResponse, 
    SearchKeyValueListRequest, 
    ServiceListRequest, 
    ServiceListResponse, 
    ServiceSearchRequest, 
    TagListRequest, 
    TagListResponse, 
    UpdateServiceRequest, 
    UpdateServiceResponse, 
    UploadProtoFileRequest, 
    UploadProtoFileResponse, 
    
} from './data';
import { generateUrl } from './helper'

Vue.use(VueResource);

@Component
export default class AppService extends Vue {
    // constructor
    constructor() {
        super()
    }

    // Base Url
    private baseUrl: string = "http://localhost:8080"
    getEnv(params: EnvListRequest): PromiseLike<EnvListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getEnv");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as EnvListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    registerService(params: RegisterServiceRequest): PromiseLike<RegisterServiceResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "registerService");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as RegisterServiceResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    updateService(params: UpdateServiceRequest): PromiseLike<UpdateServiceResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "updateService");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as UpdateServiceResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    uploadProtoFile(params: UploadProtoFileRequest): PromiseLike<UploadProtoFileResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "uploadProtoFile");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as UploadProtoFileResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    getTags(params: TagListRequest): PromiseLike<TagListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getTags");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as TagListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    getProducts(params: ProductListRequest): PromiseLike<ProductListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getProducts");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as ProductListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    getServices(params: ServiceListRequest): PromiseLike<ServiceListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getServices");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as ServiceListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    searchServices(params: ServiceSearchRequest): PromiseLike<ServiceListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "searchServices");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as ServiceListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    getKeyList(params: KeyListRequest): PromiseLike<KeyListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getKeyList");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as KeyListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    getKeyValueList(params: KeyValueListRequest): PromiseLike<KeyValueListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "getKeyValueList");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as KeyValueListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    searchKeyValueList(params: SearchKeyValueListRequest): PromiseLike<KeyValueListResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "searchKeyValueList");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as KeyValueListResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    updateKeyValue(params: KeyValueRequest): PromiseLike<KeyValueResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "updateKeyValue");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as KeyValueResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
    fetchKeyHistory(params: KVHistoryRequest): PromiseLike<KVHistoryResponse | Error> {

            let url: string = generateUrl(this.baseUrl,"AppService", "fetchKeyHistory");

            // TODO: determine use get/post according to request
            return this.$http.post(url,params).then(
                res => {
                    console.log(res);
                    // error handling
                    if (res.data.error) {
                        if (res.data.error.details) {
                            return Promise.reject(res.data.error.details)
                        }
                        return Promise.reject(res.data.error as Error)
                    }
                    return res.data.response as KVHistoryResponse;
                },
                error => { // other errors such as 500, no network
                    console.log(error);
                    return new Error("Something wrong");
                }
            );
        }
    
}
