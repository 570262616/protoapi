// Code generated by protoapi; DO NOT EDIT.

package yoozoo_protoconf_ts

import (
	"regexp"

	"github.com/labstack/echo"
)

const (
	Email string = "^(((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|\\.|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.)+(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.?$"
)

var (
	rxEmail = regexp.MustCompile(Email)
)

// AppService is the interface contains all the controllers
type AppService interface {
    GetEnv(*EnvListRequest) (*EnvListResponse, *Error)
    RegisterService(*RegisterServiceRequest) (*RegisterServiceResponse, *Error)
    UpdateService(*UpdateServiceRequest) (*UpdateServiceResponse, *Error)
    UploadProtoFile(*UploadProtoFileRequest) (*UploadProtoFileResponse, *Error)
    GetTags(*TagListRequest) (*TagListResponse, *Error)
    GetProducts(*ProductListRequest) (*ProductListResponse, *Error)
    GetServices(*ServiceListRequest) (*ServiceListResponse, *Error)
    SearchServices(*ServiceSearchRequest) (*ServiceListResponse, *Error)
    GetKeyList(*KeyListRequest) (*KeyListResponse, *Error)
    GetKeyValueList(*KeyValueListRequest) (*KeyValueListResponse, *Error)
    SearchKeyValueList(*SearchKeyValueListRequest) (*KeyValueListResponse, *Error)
    UpdateKeyValue(*KeyValueRequest) (*KeyValueResponse, *Error)
    FetchKeyHistory(*KVHistoryRequest) (*KVHistoryResponse, *Error)
}

type ResponseInternal struct {
	Response interface{} `json:"response"`
	Error    interface{} `json:"error"`
}
func _getEnv_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(EnvListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetEnv(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _registerService_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(RegisterServiceRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.RegisterService(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _updateService_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(UpdateServiceRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.UpdateService(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _uploadProtoFile_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(UploadProtoFileRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.UploadProtoFile(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _getTags_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(TagListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetTags(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _getProducts_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(ProductListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetProducts(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _getServices_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(ServiceListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetServices(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _searchServices_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(ServiceSearchRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.SearchServices(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _getKeyList_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(KeyListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetKeyList(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _getKeyValueList_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(KeyValueListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.GetKeyValueList(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _searchKeyValueList_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(SearchKeyValueListRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.SearchKeyValueList(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _updateKeyValue_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(KeyValueRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.UpdateKeyValue(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}
func _fetchKeyHistory_Handler(srv AppService) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		in := new(KVHistoryRequest)

		if err = c.Bind(in); err != nil {
			resp := ResponseInternal{Error: CommonError{BindError: &BindError{Message: err.Error()}}}
			return c.JSON(420, resp)
		}

		if valErr := in.Validate(); valErr != nil {
			resp := ResponseInternal{Error: CommonError{ValidateError: valErr}}
			return c.JSON(420, resp)
		}

		out, error := srv.FetchKeyHistory(in)
		if error != nil {
			resp := ResponseInternal{Error: error}
			return c.JSON(400, resp)
		}

		resp := ResponseInternal{Response: out}

		return c.JSON(200, resp)
	}
}

// RegisterAppService is used to bind routers
func RegisterAppService(e *echo.Echo, srv AppService) {
    e.POST("/AppService.getEnv", _getEnv_Handler(srv))
    e.POST("/AppService.registerService", _registerService_Handler(srv))
    e.POST("/AppService.updateService", _updateService_Handler(srv))
    e.POST("/AppService.uploadProtoFile", _uploadProtoFile_Handler(srv))
    e.POST("/AppService.getTags", _getTags_Handler(srv))
    e.POST("/AppService.getProducts", _getProducts_Handler(srv))
    e.POST("/AppService.getServices", _getServices_Handler(srv))
    e.POST("/AppService.searchServices", _searchServices_Handler(srv))
    e.POST("/AppService.getKeyList", _getKeyList_Handler(srv))
    e.POST("/AppService.getKeyValueList", _getKeyValueList_Handler(srv))
    e.POST("/AppService.searchKeyValueList", _searchKeyValueList_Handler(srv))
    e.POST("/AppService.updateKeyValue", _updateKeyValue_Handler(srv))
    e.POST("/AppService.fetchKeyHistory", _fetchKeyHistory_Handler(srv))
}

