<?php
// This is a file generated by protoapi (version.uuzu.com/protoapi)
// Generated at: 27 Sep 18 17:07 DST
// DO NOT EDIT.

namespace yoozoo\protoconf\ts;

use Yoozoo\ProtoApi;
use MyCLabs\Enum\Enum;

/** Messages **/
class GenericError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }
    
    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }
    
    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class AuthError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }
    
    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }
    
    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class BindError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $message;

    public function init(array $response)
    {
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }
    
    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }
    
    public function to_array()
    {
        return array(
            "message" => $this->message,
        );
    }
}

class ValidateError extends ProtoApi\CommonErrorException implements ProtoApi\Message
{
    protected $errors;

    public function init(array $response)
    {
        if (isset($response["errors"])) {
            $this->errors = array();
            foreach ($response["errors"] as $errors) {
                $tmp = new FieldError();
                $tmp->init($errors);
                $tmp->validate();
                $this->errors[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->errors)) {
            throw new Protoapi\GeneralException("'errors' is not exist");
        }
    }
    
    public function set_errors(Errors $errors)
    {
        $this->errors = $errors;
    }

    public function get_errors()
    {
        return $this->errors;
    }
    
    public function to_array()
    {
        return array(
            "errors" => $this->errors->to_array(),
        );
    }
}

class FieldError implements ProtoApi\Message
{
    protected $fieldName;
    protected $errorType;

    public function init(array $response)
    {
        if (isset($response["fieldName"])) {
            $this->fieldName = $response["fieldName"];
        }
        if (isset($response["errorType"])) {
            $this->errorType = $response["errorType"];
        }
    }

    public function validate()
    {
        if (!isset($this->fieldName)) {
            throw new Protoapi\GeneralException("'fieldName' is not exist");
        }
        if (!isset($this->errorType)) {
            throw new Protoapi\GeneralException("'errorType' is not exist");
        }
    }
    
    public function set_fieldName($fieldName)
    {
        $this->fieldName = $fieldName;
    }

    public function get_fieldName()
    {
        return $this->fieldName;
    }
    
    public function set_errorType($errorType)
    {
        $this->errorType = $errorType;
    }

    public function get_errorType()
    {
        return $this->errorType;
    }
    
    public function to_array()
    {
        return array(
            "fieldName" => $this->fieldName,
            "errorType" => $this->errorType,
        );
    }
}

class EnvListRequest implements ProtoApi\Message
{

    public function init(array $response)
    {
    }

    public function validate()
    {
    }
    
    public function to_array()
    {
        return array(
        );
    }
}

class EnvListResponse implements ProtoApi\Message
{
    protected $envs;

    public function init(array $response)
    {
        if (isset($response["envs"])) {
            $this->envs = array();
            foreach ($response["envs"] as $envs) {
                $tmp = new Env();
                $tmp->init($envs);
                $tmp->validate();
                $this->envs[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->envs)) {
            throw new Protoapi\GeneralException("'envs' is not exist");
        }
    }
    
    public function set_envs(Envs $envs)
    {
        $this->envs = $envs;
    }

    public function get_envs()
    {
        return $this->envs;
    }
    
    public function to_array()
    {
        return array(
            "envs" => $this->envs->to_array(),
        );
    }
}

class TagListRequest implements ProtoApi\Message
{

    public function init(array $response)
    {
    }

    public function validate()
    {
    }
    
    public function to_array()
    {
        return array(
        );
    }
}

class TagListResponse implements ProtoApi\Message
{
    protected $tags;

    public function init(array $response)
    {
        if (isset($response["tags"])) {
            $this->tags = array();
            foreach ($response["tags"] as $tags) {
                $tmp = new Tag();
                $tmp->init($tags);
                $tmp->validate();
                $this->tags[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->tags)) {
            throw new Protoapi\GeneralException("'tags' is not exist");
        }
    }
    
    public function set_tags(Tags $tags)
    {
        $this->tags = $tags;
    }

    public function get_tags()
    {
        return $this->tags;
    }
    
    public function to_array()
    {
        return array(
            "tags" => $this->tags->to_array(),
        );
    }
}

class ProductListRequest implements ProtoApi\Message
{
    protected $env_id;

    public function init(array $response)
    {
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
    }

    public function validate()
    {
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function to_array()
    {
        return array(
            "env_id" => $this->env_id,
        );
    }
}

class ProductListResponse implements ProtoApi\Message
{
    protected $products;

    public function init(array $response)
    {
        if (isset($response["products"])) {
            $this->products = array();
            foreach ($response["products"] as $products) {
                $tmp = new Product();
                $tmp->init($products);
                $tmp->validate();
                $this->products[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->products)) {
            throw new Protoapi\GeneralException("'products' is not exist");
        }
    }
    
    public function set_products(Products $products)
    {
        $this->products = $products;
    }

    public function get_products()
    {
        return $this->products;
    }
    
    public function to_array()
    {
        return array(
            "products" => $this->products->to_array(),
        );
    }
}

class ServiceListRequest implements ProtoApi\Message
{
    protected $tag_ids;
    protected $env_id;
    protected $offset;
    protected $limit;

    public function init(array $response)
    {
        if (isset($response["tag_ids"])) {
            $this->tag_ids = array();
            foreach ($response["tag_ids"] as $tag_ids) {
                $this->tag_ids[] = $tag_ids;
            }
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["offset"])) {
            $this->offset = $response["offset"];
        }
        if (isset($response["limit"])) {
            $this->limit = $response["limit"];
        }
    }

    public function validate()
    {
        if (!isset($this->tag_ids)) {
            throw new Protoapi\GeneralException("'tag_ids' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->offset)) {
            throw new Protoapi\GeneralException("'offset' is not exist");
        }
        if (!isset($this->limit)) {
            throw new Protoapi\GeneralException("'limit' is not exist");
        }
    }
    
    public function set_tag_ids($tag_ids)
    {
        $this->tag_ids = $tag_ids;
    }

    public function get_tag_ids()
    {
        return $this->tag_ids;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_offset($offset)
    {
        $this->offset = $offset;
    }

    public function get_offset()
    {
        return $this->offset;
    }
    
    public function set_limit($limit)
    {
        $this->limit = $limit;
    }

    public function get_limit()
    {
        return $this->limit;
    }
    
    public function to_array()
    {
        return array(
            "tag_ids" => $this->tag_ids,
            "env_id" => $this->env_id,
            "offset" => $this->offset,
            "limit" => $this->limit,
        );
    }
}

class ServiceSearchRequest implements ProtoApi\Message
{
    protected $tag_ids;
    protected $prefix;
    protected $env_id;
    protected $offset;
    protected $limit;

    public function init(array $response)
    {
        if (isset($response["tag_ids"])) {
            $this->tag_ids = array();
            foreach ($response["tag_ids"] as $tag_ids) {
                $this->tag_ids[] = $tag_ids;
            }
        }
        if (isset($response["prefix"])) {
            $this->prefix = $response["prefix"];
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["offset"])) {
            $this->offset = $response["offset"];
        }
        if (isset($response["limit"])) {
            $this->limit = $response["limit"];
        }
    }

    public function validate()
    {
        if (!isset($this->tag_ids)) {
            throw new Protoapi\GeneralException("'tag_ids' is not exist");
        }
        if (!isset($this->prefix)) {
            throw new Protoapi\GeneralException("'prefix' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->offset)) {
            throw new Protoapi\GeneralException("'offset' is not exist");
        }
        if (!isset($this->limit)) {
            throw new Protoapi\GeneralException("'limit' is not exist");
        }
    }
    
    public function set_tag_ids($tag_ids)
    {
        $this->tag_ids = $tag_ids;
    }

    public function get_tag_ids()
    {
        return $this->tag_ids;
    }
    
    public function set_prefix($prefix)
    {
        $this->prefix = $prefix;
    }

    public function get_prefix()
    {
        return $this->prefix;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_offset($offset)
    {
        $this->offset = $offset;
    }

    public function get_offset()
    {
        return $this->offset;
    }
    
    public function set_limit($limit)
    {
        $this->limit = $limit;
    }

    public function get_limit()
    {
        return $this->limit;
    }
    
    public function to_array()
    {
        return array(
            "tag_ids" => $this->tag_ids,
            "prefix" => $this->prefix,
            "env_id" => $this->env_id,
            "offset" => $this->offset,
            "limit" => $this->limit,
        );
    }
}

class ServiceListResponse implements ProtoApi\Message
{
    protected $services;
    protected $offset;
    protected $limit;
    protected $total;

    public function init(array $response)
    {
        if (isset($response["services"])) {
            $this->services = array();
            foreach ($response["services"] as $services) {
                $tmp = new Service();
                $tmp->init($services);
                $tmp->validate();
                $this->services[] = $tmp;
            }
        }
        if (isset($response["offset"])) {
            $this->offset = $response["offset"];
        }
        if (isset($response["limit"])) {
            $this->limit = $response["limit"];
        }
        if (isset($response["total"])) {
            $this->total = $response["total"];
        }
    }

    public function validate()
    {
        if (!isset($this->services)) {
            throw new Protoapi\GeneralException("'services' is not exist");
        }
        if (!isset($this->offset)) {
            throw new Protoapi\GeneralException("'offset' is not exist");
        }
        if (!isset($this->limit)) {
            throw new Protoapi\GeneralException("'limit' is not exist");
        }
        if (!isset($this->total)) {
            throw new Protoapi\GeneralException("'total' is not exist");
        }
    }
    
    public function set_services(Services $services)
    {
        $this->services = $services;
    }

    public function get_services()
    {
        return $this->services;
    }
    
    public function set_offset($offset)
    {
        $this->offset = $offset;
    }

    public function get_offset()
    {
        return $this->offset;
    }
    
    public function set_limit($limit)
    {
        $this->limit = $limit;
    }

    public function get_limit()
    {
        return $this->limit;
    }
    
    public function set_total($total)
    {
        $this->total = $total;
    }

    public function get_total()
    {
        return $this->total;
    }
    
    public function to_array()
    {
        return array(
            "services" => $this->services->to_array(),
            "offset" => $this->offset,
            "limit" => $this->limit,
            "total" => $this->total,
        );
    }
}

class KeyListRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $env_id;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "env_id" => $this->env_id,
        );
    }
}

class KeyListResponse implements ProtoApi\Message
{
    protected $keys;

    public function init(array $response)
    {
        if (isset($response["keys"])) {
            $this->keys = array();
            foreach ($response["keys"] as $keys) {
                $tmp = new Key();
                $tmp->init($keys);
                $tmp->validate();
                $this->keys[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->keys)) {
            throw new Protoapi\GeneralException("'keys' is not exist");
        }
    }
    
    public function set_keys(Keys $keys)
    {
        $this->keys = $keys;
    }

    public function get_keys()
    {
        return $this->keys;
    }
    
    public function to_array()
    {
        return array(
            "keys" => $this->keys->to_array(),
        );
    }
}

class KeyValueListRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $keys;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["keys"])) {
            $this->keys = array();
            foreach ($response["keys"] as $keys) {
                $tmp = new Key();
                $tmp->init($keys);
                $tmp->validate();
                $this->keys[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->keys)) {
            throw new Protoapi\GeneralException("'keys' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_keys(Keys $keys)
    {
        $this->keys = $keys;
    }

    public function get_keys()
    {
        return $this->keys;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "keys" => $this->keys->to_array(),
        );
    }
}

class SearchKeyValueListRequest implements ProtoApi\Message
{
    protected $key;
    protected $service_id;
    protected $env_id;

    public function init(array $response)
    {
        if (isset($response["key"])) {
            $this->key = $response["key"];
        }
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
    }

    public function validate()
    {
        if (!isset($this->key)) {
            throw new Protoapi\GeneralException("'key' is not exist");
        }
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
    }
    
    public function set_key($key)
    {
        $this->key = $key;
    }

    public function get_key()
    {
        return $this->key;
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function to_array()
    {
        return array(
            "key" => $this->key,
            "service_id" => $this->service_id,
            "env_id" => $this->env_id,
        );
    }
}

class KeyValueListResponse implements ProtoApi\Message
{
    protected $key_values;

    public function init(array $response)
    {
        if (isset($response["key_values"])) {
            $this->key_values = array();
            foreach ($response["key_values"] as $key_values) {
                $tmp = new KeyValue();
                $tmp->init($key_values);
                $tmp->validate();
                $this->key_values[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->key_values)) {
            throw new Protoapi\GeneralException("'key_values' is not exist");
        }
    }
    
    public function set_key_values(Key_values $key_values)
    {
        $this->key_values = $key_values;
    }

    public function get_key_values()
    {
        return $this->key_values;
    }
    
    public function to_array()
    {
        return array(
            "key_values" => $this->key_values->to_array(),
        );
    }
}

class KeyValueRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $key_values;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["key_values"])) {
            $this->key_values = array();
            foreach ($response["key_values"] as $key_values) {
                $tmp = new KeyValue();
                $tmp->init($key_values);
                $tmp->validate();
                $this->key_values[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->key_values)) {
            throw new Protoapi\GeneralException("'key_values' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_key_values(Key_values $key_values)
    {
        $this->key_values = $key_values;
    }

    public function get_key_values()
    {
        return $this->key_values;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "key_values" => $this->key_values->to_array(),
        );
    }
}

class KeyValueResponse implements ProtoApi\Message
{
    protected $key_values;

    public function init(array $response)
    {
        if (isset($response["key_values"])) {
            $this->key_values = array();
            foreach ($response["key_values"] as $key_values) {
                $tmp = new KeyValue();
                $tmp->init($key_values);
                $tmp->validate();
                $this->key_values[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->key_values)) {
            throw new Protoapi\GeneralException("'key_values' is not exist");
        }
    }
    
    public function set_key_values(Key_values $key_values)
    {
        $this->key_values = $key_values;
    }

    public function get_key_values()
    {
        return $this->key_values;
    }
    
    public function to_array()
    {
        return array(
            "key_values" => $this->key_values->to_array(),
        );
    }
}

class KVHistoryRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $key_id;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["key_id"])) {
            $this->key_id = $response["key_id"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->key_id)) {
            throw new Protoapi\GeneralException("'key_id' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_key_id($key_id)
    {
        $this->key_id = $key_id;
    }

    public function get_key_id()
    {
        return $this->key_id;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "key_id" => $this->key_id,
        );
    }
}

class KVHistoryResponse implements ProtoApi\Message
{
    protected $KVhistorys;

    public function init(array $response)
    {
        if (isset($response["KVhistorys"])) {
            $this->KVhistorys = array();
            foreach ($response["KVhistorys"] as $KVhistorys) {
                $tmp = new KVHistoryItem();
                $tmp->init($KVhistorys);
                $tmp->validate();
                $this->KVhistorys[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->KVhistorys)) {
            throw new Protoapi\GeneralException("'KVhistorys' is not exist");
        }
    }
    
    public function set_KVhistorys(KVhistorys $KVhistorys)
    {
        $this->KVhistorys = $KVhistorys;
    }

    public function get_KVhistorys()
    {
        return $this->KVhistorys;
    }
    
    public function to_array()
    {
        return array(
            "KVhistorys" => $this->KVhistorys->to_array(),
        );
    }
}

class RegisterServiceRequest implements ProtoApi\Message
{
    protected $env_id;
    protected $product_id;
    protected $service_name;
    protected $tags;
    protected $desc;

    public function init(array $response)
    {
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["product_id"])) {
            $this->product_id = $response["product_id"];
        }
        if (isset($response["service_name"])) {
            $this->service_name = $response["service_name"];
        }
        if (isset($response["tags"])) {
            $this->tags = array();
            foreach ($response["tags"] as $tags) {
                $tmp = new Tag();
                $tmp->init($tags);
                $tmp->validate();
                $this->tags[] = $tmp;
            }
        }
        if (isset($response["desc"])) {
            $this->desc = $response["desc"];
        }
    }

    public function validate()
    {
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->product_id)) {
            throw new Protoapi\GeneralException("'product_id' is not exist");
        }
        if (!isset($this->service_name)) {
            throw new Protoapi\GeneralException("'service_name' is not exist");
        }
        if (!isset($this->tags)) {
            throw new Protoapi\GeneralException("'tags' is not exist");
        }
        if (!isset($this->desc)) {
            throw new Protoapi\GeneralException("'desc' is not exist");
        }
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_product_id($product_id)
    {
        $this->product_id = $product_id;
    }

    public function get_product_id()
    {
        return $this->product_id;
    }
    
    public function set_service_name($service_name)
    {
        $this->service_name = $service_name;
    }

    public function get_service_name()
    {
        return $this->service_name;
    }
    
    public function set_tags(Tags $tags)
    {
        $this->tags = $tags;
    }

    public function get_tags()
    {
        return $this->tags;
    }
    
    public function set_desc($desc)
    {
        $this->desc = $desc;
    }

    public function get_desc()
    {
        return $this->desc;
    }
    
    public function to_array()
    {
        return array(
            "env_id" => $this->env_id,
            "product_id" => $this->product_id,
            "service_name" => $this->service_name,
            "tags" => $this->tags->to_array(),
            "desc" => $this->desc,
        );
    }
}

class RegisterServiceResponse implements ProtoApi\Message
{
    protected $env_id;
    protected $product_id;
    protected $service_id;
    protected $service_name;

    public function init(array $response)
    {
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["product_id"])) {
            $this->product_id = $response["product_id"];
        }
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["service_name"])) {
            $this->service_name = $response["service_name"];
        }
    }

    public function validate()
    {
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->product_id)) {
            throw new Protoapi\GeneralException("'product_id' is not exist");
        }
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->service_name)) {
            throw new Protoapi\GeneralException("'service_name' is not exist");
        }
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_product_id($product_id)
    {
        $this->product_id = $product_id;
    }

    public function get_product_id()
    {
        return $this->product_id;
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_service_name($service_name)
    {
        $this->service_name = $service_name;
    }

    public function get_service_name()
    {
        return $this->service_name;
    }
    
    public function to_array()
    {
        return array(
            "env_id" => $this->env_id,
            "product_id" => $this->product_id,
            "service_id" => $this->service_id,
            "service_name" => $this->service_name,
        );
    }
}

class UpdateServiceRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $tags;
    protected $desc;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["tags"])) {
            $this->tags = array();
            foreach ($response["tags"] as $tags) {
                $tmp = new Tag();
                $tmp->init($tags);
                $tmp->validate();
                $this->tags[] = $tmp;
            }
        }
        if (isset($response["desc"])) {
            $this->desc = $response["desc"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->tags)) {
            throw new Protoapi\GeneralException("'tags' is not exist");
        }
        if (!isset($this->desc)) {
            throw new Protoapi\GeneralException("'desc' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_tags(Tags $tags)
    {
        $this->tags = $tags;
    }

    public function get_tags()
    {
        return $this->tags;
    }
    
    public function set_desc($desc)
    {
        $this->desc = $desc;
    }

    public function get_desc()
    {
        return $this->desc;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "tags" => $this->tags->to_array(),
            "desc" => $this->desc,
        );
    }
}

class UpdateServiceResponse implements ProtoApi\Message
{
    protected $service_id;
    protected $tags;
    protected $desc;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["tags"])) {
            $this->tags = array();
            foreach ($response["tags"] as $tags) {
                $tmp = new Tag();
                $tmp->init($tags);
                $tmp->validate();
                $this->tags[] = $tmp;
            }
        }
        if (isset($response["desc"])) {
            $this->desc = $response["desc"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->tags)) {
            throw new Protoapi\GeneralException("'tags' is not exist");
        }
        if (!isset($this->desc)) {
            throw new Protoapi\GeneralException("'desc' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_tags(Tags $tags)
    {
        $this->tags = $tags;
    }

    public function get_tags()
    {
        return $this->tags;
    }
    
    public function set_desc($desc)
    {
        $this->desc = $desc;
    }

    public function get_desc()
    {
        return $this->desc;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "tags" => $this->tags->to_array(),
            "desc" => $this->desc,
        );
    }
}

class UploadProtoFileRequest implements ProtoApi\Message
{
    protected $service_id;
    protected $env_id;
    protected $file;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["file"])) {
            $this->file = $response["file"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->file)) {
            throw new Protoapi\GeneralException("'file' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_file($file)
    {
        $this->file = $file;
    }

    public function get_file()
    {
        return $this->file;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "env_id" => $this->env_id,
            "file" => $this->file,
        );
    }
}

class UploadProtoFileResponse implements ProtoApi\Message
{
    protected $service_id;
    protected $env_id;
    protected $key_count;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["key_count"])) {
            $this->key_count = $response["key_count"];
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->key_count)) {
            throw new Protoapi\GeneralException("'key_count' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_key_count($key_count)
    {
        $this->key_count = $key_count;
    }

    public function get_key_count()
    {
        return $this->key_count;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "env_id" => $this->env_id,
            "key_count" => $this->key_count,
        );
    }
}

class Env implements ProtoApi\Message
{
    protected $env_id;
    protected $env_name;

    public function init(array $response)
    {
        if (isset($response["env_id"])) {
            $this->env_id = $response["env_id"];
        }
        if (isset($response["env_name"])) {
            $this->env_name = $response["env_name"];
        }
    }

    public function validate()
    {
        if (!isset($this->env_id)) {
            throw new Protoapi\GeneralException("'env_id' is not exist");
        }
        if (!isset($this->env_name)) {
            throw new Protoapi\GeneralException("'env_name' is not exist");
        }
    }
    
    public function set_env_id($env_id)
    {
        $this->env_id = $env_id;
    }

    public function get_env_id()
    {
        return $this->env_id;
    }
    
    public function set_env_name($env_name)
    {
        $this->env_name = $env_name;
    }

    public function get_env_name()
    {
        return $this->env_name;
    }
    
    public function to_array()
    {
        return array(
            "env_id" => $this->env_id,
            "env_name" => $this->env_name,
        );
    }
}

class Tag implements ProtoApi\Message
{
    protected $tag_id;
    protected $tag_name;

    public function init(array $response)
    {
        if (isset($response["tag_id"])) {
            $this->tag_id = $response["tag_id"];
        }
        if (isset($response["tag_name"])) {
            $this->tag_name = $response["tag_name"];
        }
    }

    public function validate()
    {
        if (!isset($this->tag_id)) {
            throw new Protoapi\GeneralException("'tag_id' is not exist");
        }
        if (!isset($this->tag_name)) {
            throw new Protoapi\GeneralException("'tag_name' is not exist");
        }
    }
    
    public function set_tag_id($tag_id)
    {
        $this->tag_id = $tag_id;
    }

    public function get_tag_id()
    {
        return $this->tag_id;
    }
    
    public function set_tag_name($tag_name)
    {
        $this->tag_name = $tag_name;
    }

    public function get_tag_name()
    {
        return $this->tag_name;
    }
    
    public function to_array()
    {
        return array(
            "tag_id" => $this->tag_id,
            "tag_name" => $this->tag_name,
        );
    }
}

class Product implements ProtoApi\Message
{
    protected $product_id;
    protected $product_name;

    public function init(array $response)
    {
        if (isset($response["product_id"])) {
            $this->product_id = $response["product_id"];
        }
        if (isset($response["product_name"])) {
            $this->product_name = $response["product_name"];
        }
    }

    public function validate()
    {
        if (!isset($this->product_id)) {
            throw new Protoapi\GeneralException("'product_id' is not exist");
        }
        if (!isset($this->product_name)) {
            throw new Protoapi\GeneralException("'product_name' is not exist");
        }
    }
    
    public function set_product_id($product_id)
    {
        $this->product_id = $product_id;
    }

    public function get_product_id()
    {
        return $this->product_id;
    }
    
    public function set_product_name($product_name)
    {
        $this->product_name = $product_name;
    }

    public function get_product_name()
    {
        return $this->product_name;
    }
    
    public function to_array()
    {
        return array(
            "product_id" => $this->product_id,
            "product_name" => $this->product_name,
        );
    }
}

class Service implements ProtoApi\Message
{
    protected $service_id;
    protected $service_name;
    protected $product_id;
    protected $product_name;
    protected $desc;
    protected $tags;

    public function init(array $response)
    {
        if (isset($response["service_id"])) {
            $this->service_id = $response["service_id"];
        }
        if (isset($response["service_name"])) {
            $this->service_name = $response["service_name"];
        }
        if (isset($response["product_id"])) {
            $this->product_id = $response["product_id"];
        }
        if (isset($response["product_name"])) {
            $this->product_name = $response["product_name"];
        }
        if (isset($response["desc"])) {
            $this->desc = $response["desc"];
        }
        if (isset($response["tags"])) {
            $this->tags = array();
            foreach ($response["tags"] as $tags) {
                $tmp = new Tag();
                $tmp->init($tags);
                $tmp->validate();
                $this->tags[] = $tmp;
            }
        }
    }

    public function validate()
    {
        if (!isset($this->service_id)) {
            throw new Protoapi\GeneralException("'service_id' is not exist");
        }
        if (!isset($this->service_name)) {
            throw new Protoapi\GeneralException("'service_name' is not exist");
        }
        if (!isset($this->product_id)) {
            throw new Protoapi\GeneralException("'product_id' is not exist");
        }
        if (!isset($this->product_name)) {
            throw new Protoapi\GeneralException("'product_name' is not exist");
        }
        if (!isset($this->desc)) {
            throw new Protoapi\GeneralException("'desc' is not exist");
        }
        if (!isset($this->tags)) {
            throw new Protoapi\GeneralException("'tags' is not exist");
        }
    }
    
    public function set_service_id($service_id)
    {
        $this->service_id = $service_id;
    }

    public function get_service_id()
    {
        return $this->service_id;
    }
    
    public function set_service_name($service_name)
    {
        $this->service_name = $service_name;
    }

    public function get_service_name()
    {
        return $this->service_name;
    }
    
    public function set_product_id($product_id)
    {
        $this->product_id = $product_id;
    }

    public function get_product_id()
    {
        return $this->product_id;
    }
    
    public function set_product_name($product_name)
    {
        $this->product_name = $product_name;
    }

    public function get_product_name()
    {
        return $this->product_name;
    }
    
    public function set_desc($desc)
    {
        $this->desc = $desc;
    }

    public function get_desc()
    {
        return $this->desc;
    }
    
    public function set_tags(Tags $tags)
    {
        $this->tags = $tags;
    }

    public function get_tags()
    {
        return $this->tags;
    }
    
    public function to_array()
    {
        return array(
            "service_id" => $this->service_id,
            "service_name" => $this->service_name,
            "product_id" => $this->product_id,
            "product_name" => $this->product_name,
            "desc" => $this->desc,
            "tags" => $this->tags->to_array(),
        );
    }
}

class Key implements ProtoApi\Message
{
    protected $key_id;
    protected $key;
    protected $dataType;
    protected $defaultValue;
    protected $isWatched;

    public function init(array $response)
    {
        if (isset($response["key_id"])) {
            $this->key_id = $response["key_id"];
        }
        if (isset($response["key"])) {
            $this->key = $response["key"];
        }
        if (isset($response["dataType"])) {
            $this->dataType = $response["dataType"];
        }
        if (isset($response["defaultValue"])) {
            $this->defaultValue = $response["defaultValue"];
        }
        if (isset($response["isWatched"])) {
            $this->isWatched = $response["isWatched"];
        }
    }

    public function validate()
    {
        if (!isset($this->key_id)) {
            throw new Protoapi\GeneralException("'key_id' is not exist");
        }
        if (!isset($this->key)) {
            throw new Protoapi\GeneralException("'key' is not exist");
        }
        if (!isset($this->dataType)) {
            throw new Protoapi\GeneralException("'dataType' is not exist");
        }
        if (!isset($this->defaultValue)) {
            throw new Protoapi\GeneralException("'defaultValue' is not exist");
        }
        if (!isset($this->isWatched)) {
            throw new Protoapi\GeneralException("'isWatched' is not exist");
        }
    }
    
    public function set_key_id($key_id)
    {
        $this->key_id = $key_id;
    }

    public function get_key_id()
    {
        return $this->key_id;
    }
    
    public function set_key($key)
    {
        $this->key = $key;
    }

    public function get_key()
    {
        return $this->key;
    }
    
    public function set_dataType($dataType)
    {
        $this->dataType = $dataType;
    }

    public function get_dataType()
    {
        return $this->dataType;
    }
    
    public function set_defaultValue($defaultValue)
    {
        $this->defaultValue = $defaultValue;
    }

    public function get_defaultValue()
    {
        return $this->defaultValue;
    }
    
    public function set_isWatched($isWatched)
    {
        $this->isWatched = $isWatched;
    }

    public function get_isWatched()
    {
        return $this->isWatched;
    }
    
    public function to_array()
    {
        return array(
            "key_id" => $this->key_id,
            "key" => $this->key,
            "dataType" => $this->dataType,
            "defaultValue" => $this->defaultValue,
            "isWatched" => $this->isWatched,
        );
    }
}

class KeyValue implements ProtoApi\Message
{
    protected $key_id;
    protected $key;
    protected $dataType;
    protected $defaultValue;
    protected $isWatched;
    protected $value;

    public function init(array $response)
    {
        if (isset($response["key_id"])) {
            $this->key_id = $response["key_id"];
        }
        if (isset($response["key"])) {
            $this->key = $response["key"];
        }
        if (isset($response["dataType"])) {
            $this->dataType = $response["dataType"];
        }
        if (isset($response["defaultValue"])) {
            $this->defaultValue = $response["defaultValue"];
        }
        if (isset($response["isWatched"])) {
            $this->isWatched = $response["isWatched"];
        }
        if (isset($response["value"])) {
            $this->value = $response["value"];
        }
    }

    public function validate()
    {
        if (!isset($this->key_id)) {
            throw new Protoapi\GeneralException("'key_id' is not exist");
        }
        if (!isset($this->key)) {
            throw new Protoapi\GeneralException("'key' is not exist");
        }
        if (!isset($this->dataType)) {
            throw new Protoapi\GeneralException("'dataType' is not exist");
        }
        if (!isset($this->defaultValue)) {
            throw new Protoapi\GeneralException("'defaultValue' is not exist");
        }
        if (!isset($this->isWatched)) {
            throw new Protoapi\GeneralException("'isWatched' is not exist");
        }
        if (!isset($this->value)) {
            throw new Protoapi\GeneralException("'value' is not exist");
        }
    }
    
    public function set_key_id($key_id)
    {
        $this->key_id = $key_id;
    }

    public function get_key_id()
    {
        return $this->key_id;
    }
    
    public function set_key($key)
    {
        $this->key = $key;
    }

    public function get_key()
    {
        return $this->key;
    }
    
    public function set_dataType($dataType)
    {
        $this->dataType = $dataType;
    }

    public function get_dataType()
    {
        return $this->dataType;
    }
    
    public function set_defaultValue($defaultValue)
    {
        $this->defaultValue = $defaultValue;
    }

    public function get_defaultValue()
    {
        return $this->defaultValue;
    }
    
    public function set_isWatched($isWatched)
    {
        $this->isWatched = $isWatched;
    }

    public function get_isWatched()
    {
        return $this->isWatched;
    }
    
    public function set_value($value)
    {
        $this->value = $value;
    }

    public function get_value()
    {
        return $this->value;
    }
    
    public function to_array()
    {
        return array(
            "key_id" => $this->key_id,
            "key" => $this->key,
            "dataType" => $this->dataType,
            "defaultValue" => $this->defaultValue,
            "isWatched" => $this->isWatched,
            "value" => $this->value,
        );
    }
}

class KVHistoryItem implements ProtoApi\Message
{
    protected $updated_value;
    protected $updated_date;
    protected $updated_by;
    protected $revision;

    public function init(array $response)
    {
        if (isset($response["updated_value"])) {
            $this->updated_value = $response["updated_value"];
        }
        if (isset($response["updated_date"])) {
            $this->updated_date = $response["updated_date"];
        }
        if (isset($response["updated_by"])) {
            $this->updated_by = $response["updated_by"];
        }
        if (isset($response["revision"])) {
            $this->revision = new Int64();
            $this->revision->init($response["revision"]);
            $this->revision->validate();
        }
    }

    public function validate()
    {
        if (!isset($this->updated_value)) {
            throw new Protoapi\GeneralException("'updated_value' is not exist");
        }
        if (!isset($this->updated_date)) {
            throw new Protoapi\GeneralException("'updated_date' is not exist");
        }
        if (!isset($this->updated_by)) {
            throw new Protoapi\GeneralException("'updated_by' is not exist");
        }
        if (!isset($this->revision)) {
            throw new Protoapi\GeneralException("'revision' is not exist");
        }
    }
    
    public function set_updated_value($updated_value)
    {
        $this->updated_value = $updated_value;
    }

    public function get_updated_value()
    {
        return $this->updated_value;
    }
    
    public function set_updated_date($updated_date)
    {
        $this->updated_date = $updated_date;
    }

    public function get_updated_date()
    {
        return $this->updated_date;
    }
    
    public function set_updated_by($updated_by)
    {
        $this->updated_by = $updated_by;
    }

    public function get_updated_by()
    {
        return $this->updated_by;
    }
    
    public function set_revision(Revision $revision)
    {
        $this->revision = $revision;
    }

    public function get_revision()
    {
        return $this->revision;
    }
    
    public function to_array()
    {
        return array(
            "updated_value" => $this->updated_value,
            "updated_date" => $this->updated_date,
            "updated_by" => $this->updated_by,
            "revision" => $this->revision->to_array(),
        );
    }
}

class Error extends ProtoApi\BizErrorException implements ProtoApi\Message
{
    protected $code;
    protected $message;

    public function init(array $response)
    {
        if (isset($response["code"])) {
            $this->code = $response["code"];
        }
        if (isset($response["message"])) {
            $this->message = $response["message"];
        }
    }

    public function validate()
    {
        if (!isset($this->code)) {
            throw new Protoapi\GeneralException("'code' is not exist");
        }
        if (!isset($this->message)) {
            throw new Protoapi\GeneralException("'message' is not exist");
        }
    }
    
    public function set_code($code)
    {
        $this->code = $code;
    }

    public function get_code()
    {
        return $this->code;
    }
    
    public function set_message($message)
    {
        $this->message = $message;
    }

    public function get_message()
    {
        return $this->message;
    }
    
    public function to_array()
    {
        return array(
            "code" => $this->code,
            "message" => $this->message,
        );
    }
}

/** Enums **/
class ValidateErrorType extends Enum
{
    const INVALID_EMAIL = 0;
    const FIELD_REQUIRED = 1;
}

class ErrorCode extends Enum
{
    const DefaultError = 0;
    const GeneralError = 1000;
    const DatabaseError = 1001;
    const EtcdError = 1002;
    const SystemError = 1003;
}

class AppService
{
    protected $httpClient;

    public function __construct($baseUri = '127.0.0.1:8080')
    {
        $this->httpClient = new ProtoApi\HttpClient(
            array(
                'base_uri' => $baseUri,
                'timeout' => 30,
            )
        );
    }
    
    public function getEnv(EnvListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new EnvListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getEnv", $handler);
    }

    public function registerService(RegisterServiceRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new RegisterServiceResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.registerService", $handler);
    }

    public function updateService(UpdateServiceRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new UpdateServiceResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.updateService", $handler);
    }

    public function uploadProtoFile(UploadProtoFileRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new UploadProtoFileResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.uploadProtoFile", $handler);
    }

    public function getTags(TagListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new TagListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getTags", $handler);
    }

    public function getProducts(ProductListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new ProductListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getProducts", $handler);
    }

    public function getServices(ServiceListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new ServiceListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getServices", $handler);
    }

    public function searchServices(ServiceSearchRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new ServiceListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.searchServices", $handler);
    }

    public function getKeyList(KeyListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new KeyListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getKeyList", $handler);
    }

    public function getKeyValueList(KeyValueListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new KeyValueListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.getKeyValueList", $handler);
    }

    public function searchKeyValueList(SearchKeyValueListRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new KeyValueListResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.searchKeyValueList", $handler);
    }

    public function updateKeyValue(KeyValueRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new KeyValueResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.updateKeyValue", $handler);
    }

    public function fetchKeyHistory(KVHistoryRequest $req)
    {
        $handler = function ($response, $bizerror, $common) {
            if (!empty($response)) {
                $res = new KVHistoryResponse();
                $res->init($response);
                $res->validate();
                return $res;
            } else if (!empty($bizerror)) {
                $bizError = new Error();
                $bizError->init($bizerror);
                throw $bizError;
            } else if (!empty($common)) {
                if (isset($common["genericError"])) {
                    $genericError = new GenericError();
                    $genericError->init($common["genericError"]);
                    throw $genericError;
                } else if (isset($common["authError"])) {
                    $authError = new AuthError();
                    $authError->init($common["authError"]);
                    throw $authError;
                } else if (isset($common["validateError"])) {
                    $validateError = new ValidateError();
                    $validateError->init($common["validateError"]);
                    throw $validateError;
                } else if (isset($common["bindError"])) {
                    $bindError = new BindError();
                    $bindError->init($common["bindError"]);
                    throw $bindError;
                } else {
                    throw new ProtoApi\GeneralException("Unknown common error type: ".$response);
                }
            }
            throw new ProtoApi\GeneralException("No data returned.");
        };

        return $this->httpClient->callApi($req, "post", "AppService.fetchKeyHistory", $handler);
    }
}
