syntax = "proto3";

import "test/common.proto";

// package
package yoozoo.protoconf.ts;
option java_package = "com.yoozoo.spring";

// tag list - 用于分类
message TagListRequest {
}

message TagListResponse {
    repeated Tag tags = 1;
}

// product list
message ProductListRequest {
    int32 env_id = 1; // DEV, UAT, PROD etc
}

message ProductListResponse {
    repeated Product products = 1;
}

// service list
message ServiceListRequest{
    repeated string tag_ids = 1; // optional, for filter
    int32 env_id = 2;
    int32 page_index = 3;
    int32 items_per_page = 4;
}

message ServiceListResponse{
    repeated Service services = 1;
    int32 page_index = 2;
    int32 items_per_page = 3;
}

// key list
// PS: separate key list & key value because proto and kv store may be on different endpoint
message KeyListRequest {
    int32 service_id = 1;
    int32 env_id = 2;
}

message KeyListResponse {
    repeated string keys = 1;
    int32 service_id = 2;
    string service_name = 3;
    int32 env_id = 4;
    string env_name = 5;
}

// key value
message KeyValueListRequest {
    repeated string keys = 1;
    int32 env_id = 2;
}

message KeyValueListResponse {
    repeated KeyValue key_values = 1;
    int32 service_id = 2;
    string service_name = 3;
    int32 env_id = 4;
    string env_name = 5;
}

message KeyValueRequest {
    KeyValue key_value = 1;
    int32 env_id = 2;
}

message KeyValueResponse {
    KeyValue key_value = 1;
    int32 service_id = 2;
    string service_name = 3;
    int32 env_id = 4;
    string env_name = 5;
}

message KVHistoryRequest {
    string key = 1;
    int32 env_id = 2;
    int32 service_id = 3;
}

message KVHistoryResponse {
    repeated KVHistoryItem KVhistory = 1;
    string key = 2;
    int32 service_id = 3;
    string service_name = 4;
}

message RegisterServiceRequest {
    int32 env_id = 1;
    string product_id = 2;
    string service_name = 3;
    repeated Tag tags = 4;
    string desc = 5;
    // .proto 文件上传暂时独立出来
}

message RegisterServiceResponse {
    int32 env_id = 1;
    string product_id = 2;
    int32 service_id = 3;
    string service_name = 4;
}

message EnvListRequest {
}

message EnvListResponse {
    repeated Env envs = 1;
}

// other building blocks
message Env {
    int32 env_id = 1;
    string env_name = 2;
}

// 用于分类
message Tag {
    string tag_id = 1;
    string tag_name = 2;
}

message Product {
    string product_id = 1;
    string product_name = 2;
}

message Service {
    int32 service_id = 1;
    string service_name = 2;
    string product_name = 3;
}

message KeyValue {
    string key = 1;
    string value = 2;
    bool isWatched = 3;
    bool isImported = 4; // omited for now
    repeated KVHistoryItem history = 5; // readonly
}

message KVHistoryItem {
    string updated_value = 1;
    string updated_date = 2;
    string updated_by =3;
}

/**
* This service contains all the rpc related with services
*/
service AppService {
    // get env
    rpc getEnv (EnvListRequest) returns (EnvListResponse){
        option (service_method) = "GET";
    }

    // register a service
    rpc registerService (RegisterServiceRequest) returns (RegisterServiceResponse);

    // get a list of tags that contains apps
    rpc getTags (TagListRequest) returns (TagListResponse) {
        option (service_method) = "GET";
    }

    // get a list of apps under specified tag
    rpc getProducts (ProductListRequest) returns (ProductListResponse) {
        option (service_method) = "POST";
    }

    // get a list of services under specified tag
    rpc getServices (ServiceListRequest) returns (ServiceListResponse) {
        option (service_method) = "POST";
    }

    // search services
    rpc searchServices (ServiceListRequest) returns (ServiceListResponse){
        option (service_method) = "GET";
    }

    // get a list of keys of the specified service
    rpc getKeyList (KeyListRequest) returns (KeyListResponse);

    // get key-value pairs given the list of keys
    rpc getKeyValueList (KeyValueListRequest) returns (KeyValueListResponse);

    // search key value list by key or value
    rpc searchKeyValueList (KeyValueListRequest) returns (KeyValueListResponse){
        option (service_method) = "GET";
    }

    // update value by key
    rpc updateKeyValue (KeyValueRequest) returns (KeyValueResponse);

    // fetch key's value change history
    rpc fetchKeyHistory (KVHistoryRequest) returns (KVHistoryResponse);
}
